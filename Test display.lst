CCS PCH C Compiler, Version 5.070, 56587               22-dic.-21 11:18

               Filename:   E:\Horno\HornoDeRefusion-Codigo\Test display.lst

               ROM used:   2876 bytes (9%)
                           Largest free fragment is 29892
               RAM used:   478 (23%) at main() level
                           505 (25%) worst case
               Stack used: 6 locations
               Stack size: 31

*
0000:  GOTO   07BA
.................... #include <18f2550.h> 
.................... //////////// Standard Header file for the PIC18F2550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F2550 
*
000A:  MOVFF  1E6,01
000E:  MOVFF  1E5,00
0012:  TSTFSZ 00
0014:  INCF   01,F
0016:  TBLRD*+
0018:  MOVFF  FF5,FEE
001C:  DECFSZ 00,F
001E:  GOTO   0016
0022:  DECFSZ 01,F
0024:  GOTO   0016
0028:  CLRF   FF8
002A:  RETURN 0
*
01BE:  MOVLB  1
01C0:  MOVF   xE4,W
01C2:  CLRF   01
01C4:  SUBWF  xE3,W
01C6:  BC    01CE
01C8:  MOVFF  1E3,00
01CC:  BRA    01E6
01CE:  CLRF   00
01D0:  MOVLW  08
01D2:  MOVWF  xE5
01D4:  RLCF   xE3,F
01D6:  RLCF   00,F
01D8:  MOVF   xE4,W
01DA:  SUBWF  00,W
01DC:  BTFSC  FD8.0
01DE:  MOVWF  00
01E0:  RLCF   01,F
01E2:  DECFSZ xE5,F
01E4:  BRA    01D4
01E6:  MOVLB  0
01E8:  RETURN 0
*
02C2:  ADDWF  FE8,W
02C4:  CLRF   FF7
02C6:  RLCF   FF7,F
02C8:  ADDLW  DD
02CA:  MOVWF  FF6
02CC:  MOVLW  02
02CE:  ADDWFC FF7,F
02D0:  TBLRD*-
02D2:  MOVF   FF5,W
02D4:  MOVWF  FFA
02D6:  TBLRD*
02D8:  MOVF   FF5,W
02DA:  MOVWF  FF9
02DC:  DATA 02,02
02DE:  DATA 1A,02
02E0:  DATA 32,02
02E2:  DATA 44,02
*
03AC:  MOVLB  1
03AE:  MOVF   xED,W
03B0:  MULWF  xEF
03B2:  MOVFF  FF3,01
03B6:  MOVFF  FF4,00
03BA:  MULWF  xF0
03BC:  MOVF   FF3,W
03BE:  ADDWF  00,F
03C0:  MOVF   xEE,W
03C2:  MULWF  xEF
03C4:  MOVF   FF3,W
03C6:  ADDWFC 00,W
03C8:  MOVWF  02
03CA:  MOVLB  0
03CC:  RETURN 0
*
073E:  MOVF   01,W
0740:  MOVFF  1DE,1E3
0744:  MOVLW  64
0746:  MOVLB  1
0748:  MOVWF  xE4
074A:  MOVLB  0
074C:  RCALL  01BE
074E:  MOVFF  00,1DE
0752:  MOVF   01,W
0754:  MOVLW  30
0756:  BNZ   0768
0758:  MOVLB  1
075A:  BTFSS  xDF.1
075C:  BRA    077C
075E:  BTFSC  xDF.3
0760:  BRA    077C
0762:  BTFSC  xDF.4
0764:  MOVLW  20
0766:  BRA    0770
0768:  MOVLB  1
076A:  BCF    xDF.3
076C:  BCF    xDF.4
076E:  BSF    xDF.0
0770:  ADDWF  01,F
0772:  MOVFF  01,1E0
0776:  MOVLB  0
0778:  RCALL  05EA
077A:  MOVLB  1
077C:  MOVFF  1DE,1E3
0780:  MOVLW  0A
0782:  MOVWF  xE4
0784:  MOVLB  0
0786:  RCALL  01BE
0788:  MOVFF  00,1DE
078C:  MOVF   01,W
078E:  MOVLW  30
0790:  BNZ   07A2
0792:  MOVLB  1
0794:  BTFSC  xDF.3
0796:  BRA    07AC
0798:  BTFSS  xDF.0
079A:  BRA    07AC
079C:  BTFSC  xDF.4
079E:  MOVLW  20
07A0:  MOVLB  0
07A2:  ADDWF  01,F
07A4:  MOVFF  01,1E0
07A8:  RCALL  05EA
07AA:  MOVLB  1
07AC:  MOVLW  30
07AE:  ADDWF  xDE,F
07B0:  MOVFF  1DE,1E0
07B4:  MOVLB  0
07B6:  RCALL  05EA
07B8:  RETURN 0
....................  
.................... #list 
....................  
.................... #fuses nomclr, nowdt, nolvp, noprotect 
.................... #define freq 8000000 
.................... #use delay(int=freq) 
*
004C:  MOVLW  01
004E:  MOVWF  FEA
0050:  MOVLW  E5
0052:  MOVWF  FE9
0054:  MOVF   FEF,W
0056:  BZ    0072
0058:  MOVLW  02
005A:  MOVWF  01
005C:  CLRF   00
005E:  DECFSZ 00,F
0060:  BRA    005E
0062:  DECFSZ 01,F
0064:  BRA    005C
0066:  MOVLW  97
0068:  MOVWF  00
006A:  DECFSZ 00,F
006C:  BRA    006A
006E:  DECFSZ FEF,F
0070:  BRA    0058
0072:  RETURN 0
....................  
.................... #use SPI(SPI1, MODE = 2, BITS = 8, STREAM = ST7789) 
*
002C:  MOVF   FC9,W
002E:  MOVFF  1F8,FC9
0032:  RRCF   FC7,W
0034:  BNC   0032
0036:  MOVFF  FC9,00
003A:  RETURN 0
....................  
.................... #define TFT_DC    PIN_C6     // data/command pin 
.................... #define TFT_CS    PIN_C5   // chip select pin, use it if the display has CS pin 
....................  
....................    int letra[91][5] = { 
....................       {0x00, 0x00, 0x00, 0x00, 0x00}, // Espacio 
....................       {0x7F, 0x01, 0x01, 0x01, 0x03}, // ! -> Ã (Gama ruso) 
....................       {0x7D, 0x0A, 0x12, 0x21, 0x7D}, // " -> Ñ (Eñe ~ + N) 
....................       {0x70, 0x29, 0x27, 0x21, 0x7f}, // # -> Ä (Delta ruso) 
....................       {0x38, 0x44, 0x46, 0x45, 0x38}, // $ -> Ó  
....................       {0x1C, 0x22, 0x7F, 0x22, 0x1C}, // % -> Ô (Fi ruso) 
....................       {0x7C, 0x55, 0x56, 0x54, 0x54}, // & -> È (É con el tilde a la izq `) 
....................       {0x7C, 0x54, 0x56, 0x55, 0x54}, // ' -> É 
....................       {0x07, 0x08, 0x08, 0x08, 0x7F}, // ( -> × (Ch ruso) 
....................       {0x20, 0x41, 0x3F, 0x01, 0x7F}, // ) -> Ë (Lambda ruso) 
....................       {0x30, 0x48, 0x45, 0x40, 0x20}, // * -> ¿ (? invertido) 
....................       {0x3E, 0x41, 0xC1, 0x41, 0x22}, // + -> Ç 
....................       {0x7F, 0x49, 0x49, 0x49, 0x73}, // , -> Á (B ruso) 
....................       {0x7F, 0x01, 0x01, 0x01, 0x7F}, // - -> Ï (Pi ruso) 
....................       {0x00, 0x30, 0x30, 0x00, 0x00}, // . 
....................       {0x00, 0x02, 0x05, 0x02, 0x00}, // / -> ° 
....................       {0x3E, 0x51, 0x49, 0x45, 0x3E}, // 0 
....................       {0x00, 0x42, 0x7F, 0x40, 0x00}, // 1 
....................       {0x42, 0x61, 0x51, 0x49, 0x46}, // 2 
....................       {0x21, 0x41, 0x45, 0x4B, 0x31}, // 3 
....................       {0x18, 0x14, 0x12, 0x7F, 0x10}, // 4 
....................       {0x27, 0x45, 0x45, 0x45, 0x39}, // 5 
....................       {0x3C, 0x4A, 0x49, 0x49, 0x30}, // 6 
....................       {0x01, 0x71, 0x09, 0x05, 0x03}, // 7 
....................       {0x36, 0x49, 0x49, 0x49, 0x36}, // 8 
....................       {0x06, 0x49, 0x49, 0x29, 0x1E}, // 9 
....................       {0x00, 0x36, 0x36, 0x00, 0x00}, // : 
....................       {0x7F, 0x48, 0x48, 0x48, 0x38}, // ; -> Ü (Mini b rusa) 
....................       {0x7F, 0x40, 0x7F, 0x40, 0xFF}, // < -> Ù (Sh rusa) 
....................       {0x7F, 0x08, 0x3E, 0x41, 0x3E}, // = -> Þ (Iu ruso) 
....................       {0x46, 0x29, 0x19, 0x09, 0x7F}, // > -> ß (Ia ruso) 
....................       {0x02, 0x01, 0x51, 0x09, 0x06}, // ? 
....................       {0x7F, 0x48, 0x30, 0x00, 0x7F}, // @ -> Û (Bi ruso) 
....................       {0x7E, 0x11, 0x11, 0x11, 0x7E}, // A 
....................       {0x7F, 0x49, 0x49, 0x49, 0x36}, // B 
....................       {0x3E, 0x41, 0x41, 0x41, 0x22}, // C 
....................       {0x7F, 0x41, 0x41, 0x41, 0x3E}, // D 
....................       {0x7F, 0x49, 0x49, 0x49, 0X41}, // E 
....................       {0x7F, 0x09, 0x09, 0x09, 0x01}, // F 
....................       {0x3E, 0x41, 0x49, 0x49, 0x7A}, // G 
....................       {0x7F, 0x08, 0x08, 0x08, 0x7F}, // H 
....................       {0x00, 0x41, 0x7F, 0x41, 0x00}, // I 
....................       {0x20, 0x40, 0x41, 0x3F, 0x01}, // J 
....................       {0x7F, 0x08, 0x14, 0x22, 0x41}, // K 
....................       {0x7F, 0x40, 0x40, 0x40, 0x40}, // L 
....................       {0x7F, 0x01, 0x02, 0x01, 0x7F}, // M 
....................       {0x7F, 0x04, 0x08, 0x10, 0x7F}, // N 
....................       {0x3E, 0x41, 0x41, 0x41, 0x3E}, // O 
....................       {0x7F, 0x09, 0x09, 0x09, 0x06}, // P 
....................       {0x3E, 0x41, 0x51, 0x21, 0x5E}, // Q 
....................       {0x7F, 0x09, 0x19, 0x29, 0x46}, // R 
....................       {0x46, 0x49, 0x49, 0x49, 0x31}, // S 
....................       {0x01, 0x01, 0x7F, 0x01, 0x01}, // T 
....................       {0x3F, 0x40, 0x40, 0x40, 0x3F}, // U 
....................       {0x1F, 0x20, 0x40, 0x20, 0x1F}, // V 
....................       {0x3F, 0x40, 0x38, 0x40, 0x3F}, // W 
....................       {0x63, 0x14, 0x08, 0x14, 0x63}, // X 
....................       {0x07, 0x08, 0x70, 0x08, 0x07}, // Y 
....................       {0x61, 0x51, 0x49, 0x45, 0x43}, // Z 
....................       {0x41, 0x49, 0x49, 0x49, 0x36}, // [ -> Ç (Zeta ruso) 
....................       {0x7F, 0x10, 0x08, 0x04, 0x7F}, // \ -> È (I ruso) 
....................       {0x7C, 0x21, 0x12, 0x09, 0x7C}, // ] -> É (Ij ruso) 
....................       {0x00, 0x00, 0x00, 0x00, 0x00}, // ^ 
....................       {0x00, 0x00, 0x00, 0x00, 0x00}, // _ 
....................       {0x00, 0x00, 0x00, 0x00, 0x00}, // ` 
....................       {0x20, 0x54, 0x54, 0x54, 0x78}, // a 
....................       {0x7F, 0x48, 0x44, 0x44, 0x38}, // b 
....................       {0x38, 0x44, 0x44, 0x44, 0x20}, // c 
....................       {0x38, 0x44, 0x44, 0x48, 0x7F}, // d 
....................       {0x38, 0x54, 0x54, 0x54, 0x18}, // e 
....................       {0x08, 0x7E, 0x09, 0x01, 0x02}, // f 
....................       {0x06, 0x49, 0x49, 0x49, 0x3F}, // g 
....................       {0x7F, 0x08, 0x04, 0x04, 0x78}, // h 
....................       {0x00, 0x44, 0x7D, 0x40, 0x00}, // i 
....................       {0x20, 0x40, 0x42, 0x3F, 0x00}, // j 
....................       {0x7F, 0x10, 0x28, 0x44, 0x00}, // k 
....................       {0x00, 0x41, 0x7F, 0x40, 0x00}, // l 
....................       {0x7C, 0x04, 0x18, 0x04, 0x78}, // m 
....................       {0x7C, 0x08, 0x04, 0x04, 0x7C}, // n 
....................       {0x38, 0x44, 0x44, 0x44, 0x38}, // o 
....................       {0x7C, 0x14, 0x14, 0x14, 0x08}, // p 
....................       {0x08, 0x14, 0x14, 0x18, 0x7C}, // q 
....................       {0x7C, 0x08, 0x04, 0x04, 0x08}, // r 
....................       {0x48, 0x54, 0x54, 0x54, 0x24}, // s 
....................       {0x02, 0x3F, 0x42, 0x40, 0x20}, // t 
....................       {0x3C, 0x40, 0x40, 0x20, 0x7C}, // u 
....................       {0x1C, 0x20, 0x40, 0x20, 0x1C}, // v 
....................       {0x3C, 0x40, 0x30, 0x40, 0x3C}, // w 
....................       {0x44, 0x28, 0x10, 0x28, 0x44}, // x 
....................       {0x0C, 0x50, 0x50, 0x50, 0x3C}, // y 
....................       {0x44, 0x64, 0x54, 0x4C, 0x44}  // z 
....................    }; 
....................     
.................... #include "ST7789.c" 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                              ST7789.c                             //// 
.................... ////                                                                   //// 
.................... ////               ST7789 display driver for CCS C compiler            //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////               This is a free software with NO WARRANTY.           //// 
.................... ////                     https://simple-circuit.com/                   //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... /************************************************************************** 
....................   This is a library for several Adafruit displays based on ST77* drivers. 
....................  
....................   Works with the Adafruit 1.8" TFT Breakout w/SD card 
....................     ----> http://www.adafruit.com/products/358 
....................   The 1.8" TFT shield 
....................     ----> https://www.adafruit.com/product/802 
....................   The 1.44" TFT breakout 
....................     ----> https://www.adafruit.com/product/2088 
....................   as well as Adafruit raw 1.8" TFT display 
....................     ----> http://www.adafruit.com/products/618 
....................  
....................   Check out the links above for our tutorials and wiring diagrams. 
....................   These displays use SPI to communicate, 4 or 5 pins are required to 
....................   interface (RST is optional). 
....................  
....................   Adafruit invests time and resources providing this open source code, 
....................   please support Adafruit and open-source hardware by purchasing 
....................   products from Adafruit! 
....................  
....................   Written by Limor Fried/Ladyada for Adafruit Industries. 
....................   MIT license, all text above must be included in any redistribution 
....................  **************************************************************************/ 
....................  
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (127) 
.................... #define INT8_MIN  (-128) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (127) 
.................... #define INT_LEAST8_MIN  (-128) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (127) 
.................... #define INT_FAST8_MIN  (-128) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... #if defined(__PCD__) 
....................    typedef unsigned int32 uintptr_t; 
....................    typedef signed int32 intptr_t; 
.................... #else 
....................    typedef unsigned int16 uintptr_t; 
....................    typedef signed int16 intptr_t; 
.................... #endif 
....................  
.................... /// TODO: 
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
.................... #ifndef bool 
.................... #define bool int1 
.................... #endif 
....................  
.................... #define HEIGHT 162 
.................... #define WIDTH  132 
....................  
.................... #define ST_CMD_DELAY      0x80    // special signifier for command lists 
....................  
.................... #define ST77XX_NOP        0x00 
.................... #define ST77XX_SWRESET    0x01 
.................... #define ST77XX_RDDID      0x04 
.................... #define ST77XX_RDDST      0x09 
....................  
.................... #define ST77XX_SLPIN      0x10 
.................... #define ST77XX_SLPOUT     0x11 
.................... #define ST77XX_PTLON      0x12 
.................... #define ST77XX_NORON      0x13 
....................  
.................... #define ST77XX_INVOFF     0x20 
.................... #define ST77XX_INVON      0x21 
.................... #define ST77XX_DISPOFF    0x28 
.................... #define ST77XX_DISPON     0x29 
.................... #define ST77XX_CASET      0x2A 
.................... #define ST77XX_RASET      0x2B 
.................... #define ST77XX_RAMWR      0x2C 
.................... #define ST77XX_RAMRD      0x2E 
....................  
.................... #define ST77XX_PTLAR      0x30 
.................... #define ST77XX_COLMOD     0x3A 
.................... #define ST77XX_MADCTL     0x36 
....................  
.................... #define ST77XX_MADCTL_MY  0x80 
.................... #define ST77XX_MADCTL_MX  0x40 
.................... #define ST77XX_MADCTL_MV  0x20 
.................... #define ST77XX_MADCTL_ML  0x10 
.................... #define ST77XX_MADCTL_RGB 0x00 
....................  
.................... #define ST77XX_RDID1      0xDA 
.................... #define ST77XX_RDID2      0xDB 
.................... #define ST77XX_RDID3      0xDC 
.................... #define ST77XX_RDID4      0xDD 
....................  
.................... // Some ready-made 16-bit ('565') color settings: 
.................... #define   ST7789_BLACK   0x0000 
.................... #define   ST7789_BLUE    0x001F 
.................... #define   ST7789_RED     0xF800 
.................... #define   ST7789_GREEN   0x07E0 
.................... #define   ST7789_CYAN    0x07FF 
.................... #define   ST7789_MAGENTA 0xF81F 
.................... #define   ST7789_YELLOW  0xFFE0 
.................... #define   ST7789_WHITE   0xFFFF 
....................  
.................... #ifndef ST7789_SPI_XFER 
.................... #define ST7789_SPI_XFER(x) SPI_XFER(ST7789, x) 
.................... #endif 
....................  
.................... uint8_t 
....................   _width,     ///< Display width as modified by current rotation 
....................   _height,    ///< Display height as modified by current rotation 
....................   _xstart,    ///< Internal framebuffer X offset 
....................   _ystart,    ///< Internal framebuffer Y offset 
....................   _colstart,  ///< Some displays need this changed to offset 
....................   _rowstart,  ///< Some displays need this changed to offset 
....................   rotation,   ///< Display rotation (0 thru 3) 
....................   X_MAX, 
....................   X_BEGIN, 
....................   Y_MAX, 
....................   Y_BEGIN; 
....................  
.................... uint8_t X; 
.................... uint8_t Y; 
.................... uint8_t CARRIAGE; 
.................... uint16_t TX_COLOR; 
.................... uint16_t BG_COLOR; 
....................  
.................... bool Cursor = FALSE; 
....................  
....................  
.................... // SCREEN INITIALIZATION *************************************************** 
....................  
.................... // Rather than a bazillion writecommand() and writedata() calls, screen 
.................... // initialization commands and arguments are organized in these tables 
.................... // stored in PROGMEM.  The table may look bulky, but that's mostly the 
.................... // formatting -- storage-wise this is hundreds of bytes more compact 
.................... // than the equivalent code.  Companion function follows. 
....................  
.................... #define ST7789_240x240_XSTART 0 
.................... #define ST7789_240x240_YSTART 0     //80 
....................  
.................... rom uint8_t 
....................   cmd_240x240[] =  {                // Init commands for 7789 screens 
....................     9,                              //  9 commands in list: 
....................     ST77XX_SWRESET,   ST_CMD_DELAY, //  1: Software reset, no args, w/delay 
....................       150,                          //    150 ms delay 
....................     ST77XX_SLPOUT ,   ST_CMD_DELAY, //  2: Out of sleep mode, no args, w/delay 
....................       255,                          //     255 = 500 ms delay 
....................     ST77XX_COLMOD , 1+ST_CMD_DELAY, //  3: Set color mode, 1 arg + delay: 
....................       0x55,                         //     16-bit color 
....................       10,                           //     10 ms delay 
....................     ST77XX_MADCTL , 1,              //  4: Mem access ctrl (directions), 1 arg: 
....................       0x08,                         //     Row/col addr, bottom-top refresh 
....................     ST77XX_CASET  , 4,              //  5: Column addr set, 4 args, no delay: 
....................       0x00, 
....................       ST7789_240x240_XSTART,        //     XSTART = 0 
....................       (WIDTH+ST7789_240x240_XSTART)>>8, 
....................       (WIDTH+ST7789_240x240_XSTART)&0xFF,  //     XEND = 240 
....................     ST77XX_RASET  , 4,              //  6: Row addr set, 4 args, no delay: 
....................       0x00, 
....................       ST7789_240x240_YSTART,             //     YSTART = 0 
....................       (HEIGHT+ST7789_240x240_YSTART)>>8, 
....................       (HEIGHT+ST7789_240x240_YSTART)&0xFF,  //     YEND = 240 
....................     ST77XX_INVON  ,   ST_CMD_DELAY,  //  7: hack 
....................       10, 
....................     ST77XX_NORON  ,   ST_CMD_DELAY, //  8: Normal display on, no args, w/delay 
....................       10,                           //     10 ms delay 
....................     ST77XX_DISPON ,   ST_CMD_DELAY, //  9: Main screen turn on, no args, delay 
....................     255 };                          //     255 = max (500 ms) delay 
....................  
.................... //*************************** User Functions ***************************// 
.................... void tft_init(void); 
....................  
.................... void drawPixel(uint8_t x, uint8_t y, uint16_t color); 
.................... void drawHLine(uint8_t x, uint8_t y, uint8_t w, uint16_t color); 
.................... void drawVLine(uint8_t x, uint8_t y, uint8_t h, uint16_t color); 
.................... void fillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color); 
.................... void fillScreen(uint16_t color); 
.................... void setRotation(uint8_t m); 
.................... void invertDisplay(bool i); 
....................  
.................... void tft_putc(char c); 
.................... void printDisp(uint8_t x, uint8_t y, uint16_t color, uint16_t b_color, int ch[5]); 
.................... void tft_gotoxy(uint8_t x, uint8_t y); 
.................... void tft_cursor_on(bool curs); 
....................  
.................... //************************* Non User Functions *************************// 
.................... void startWrite(void); 
.................... void endWrite(void); 
.................... void displayInit(rom uint8_t *addr); 
.................... void writeCommand(uint8_t cmd); 
.................... void setAddrWindow(uint8_t x, uint8_t y, uint8_t w, uint8_t h); 
....................  
.................... /**************************************************************************/ 
.................... /*! 
....................     @brief  Call before issuing command(s) or data to display. Performs 
....................             chip-select (if required). Required 
....................             for all display types; not an SPI-specific function. 
.................... */ 
.................... /**************************************************************************/ 
.................... void startWrite(void) { 
....................   #ifdef TFT_CS 
....................     output_low(TFT_CS); 
*
0004:  BCF    F94.5
0006:  BCF    F8B.5
....................   #endif 
0008:  RETURN 0
.................... } 
....................  
.................... /**************************************************************************/ 
.................... /*! 
....................     @brief  Call after issuing command(s) or data to display. Performs 
....................             chip-deselect (if required). Required 
....................             for all display types; not an SPI-specific function. 
.................... */ 
.................... /**************************************************************************/ 
.................... void endWrite(void) { 
....................   #ifdef TFT_CS 
....................     output_high(TFT_CS); 
*
0074:  BCF    F94.5
0076:  BSF    F8B.5
....................   #endif 
0078:  RETURN 0
.................... } 
....................  
.................... /**************************************************************************/ 
.................... /*! 
....................     @brief  Write a single command byte to the display. Chip-select and 
....................             transaction must have been previously set -- this ONLY sets 
....................             the device to COMMAND mode, issues the byte and then restores 
....................             DATA mode. There is no corresponding explicit writeData() 
....................             function -- just use ST7789_SPI_XFER(). 
....................     @param  cmd  8-bit command to write. 
.................... */ 
.................... /**************************************************************************/ 
.................... void writeCommand(uint8_t cmd) { 
....................   output_low(TFT_DC); 
*
003C:  BCF    F94.6
003E:  BCF    F8B.6
....................   ST7789_SPI_XFER(cmd); 
0040:  MOVFF  1F7,1F8
0044:  RCALL  002C
....................   output_high(TFT_DC); 
0046:  BCF    F94.6
0048:  BSF    F8B.6
004A:  RETURN 0
.................... } 
....................  
.................... /**************************************************************************/ 
.................... /*! 
....................     @brief  Companion code to the initiliazation tables. Reads and issues 
....................             a series of LCD commands stored in ROM byte array. 
....................     @param  addr  Flash memory array with commands and data to send 
.................... */ 
.................... /**************************************************************************/ 
.................... void displayInit(rom uint8_t *addr){ 
....................   uint8_t  numCommands, numArgs; 
....................   uint16_t ms; 
....................   startWrite(); 
*
007A:  RCALL  0004
....................  
....................   numCommands = *addr++;   // Number of commands to follow 
007C:  MOVLB  1
007E:  MOVF   xDF,W
0080:  MOVWF  03
0082:  MOVF   xDE,W
0084:  INCF   xDE,F
0086:  BTFSC  FD8.2
0088:  INCF   xDF,F
008A:  MOVWF  FF6
008C:  MOVFF  03,FF7
0090:  CLRF   FF8
0092:  MOVLW  01
0094:  MOVWF  FEA
0096:  MOVLW  E4
0098:  MOVWF  FE9
009A:  CLRF   xE6
009C:  MOVLW  01
009E:  MOVWF  xE5
00A0:  MOVLB  0
00A2:  RCALL  000A
00A4:  MOVFF  1E4,1E0
....................    
....................   while(numCommands--) {                 // For each command... 
00A8:  MOVLB  1
00AA:  MOVF   xE0,W
00AC:  DECF   xE0,F
00AE:  XORLW  00
00B0:  BTFSC  FD8.2
00B2:  BRA    01B6
....................  
....................     writeCommand(*addr++); // Read, issue command 
00B4:  MOVF   xDF,W
00B6:  MOVWF  03
00B8:  MOVF   xDE,W
00BA:  INCF   xDE,F
00BC:  BTFSC  FD8.2
00BE:  INCF   xDF,F
00C0:  MOVWF  FF6
00C2:  MOVFF  03,FF7
00C6:  CLRF   FF8
00C8:  MOVLW  01
00CA:  MOVWF  FEA
00CC:  MOVLW  E4
00CE:  MOVWF  FE9
00D0:  CLRF   xE6
00D2:  MOVLW  01
00D4:  MOVWF  xE5
00D6:  MOVLB  0
00D8:  RCALL  000A
00DA:  MOVFF  1E4,1F7
00DE:  RCALL  003C
....................     numArgs  = *addr++;    // Number of args to follow 
00E0:  MOVLB  1
00E2:  MOVF   xDF,W
00E4:  MOVWF  03
00E6:  MOVF   xDE,W
00E8:  INCF   xDE,F
00EA:  BTFSC  FD8.2
00EC:  INCF   xDF,F
00EE:  MOVWF  FF6
00F0:  MOVFF  03,FF7
00F4:  CLRF   FF8
00F6:  MOVLW  01
00F8:  MOVWF  FEA
00FA:  MOVLW  E4
00FC:  MOVWF  FE9
00FE:  CLRF   xE6
0100:  MOVLW  01
0102:  MOVWF  xE5
0104:  MOVLB  0
0106:  RCALL  000A
0108:  MOVFF  1E4,1E1
....................     ms       = numArgs & ST_CMD_DELAY;   // If hibit set, delay follows args 
010C:  MOVLB  1
010E:  MOVF   xE1,W
0110:  ANDLW  80
0112:  MOVWF  xE2
0114:  CLRF   xE3
....................     numArgs &= ~ST_CMD_DELAY;            // Mask out delay bit 
0116:  BCF    xE1.7
....................     while(numArgs--) {                   // For each argument... 
0118:  MOVF   xE1,W
011A:  DECF   xE1,F
011C:  XORLW  00
011E:  BZ    0150
....................       ST7789_SPI_XFER(*addr++);   // Read, issue argument 
0120:  MOVF   xDF,W
0122:  MOVWF  03
0124:  MOVF   xDE,W
0126:  INCF   xDE,F
0128:  BTFSC  FD8.2
012A:  INCF   xDF,F
012C:  MOVWF  FF6
012E:  MOVFF  03,FF7
0132:  CLRF   FF8
0134:  MOVLW  01
0136:  MOVWF  FEA
0138:  MOVLW  E4
013A:  MOVWF  FE9
013C:  CLRF   xE6
013E:  MOVLW  01
0140:  MOVWF  xE5
0142:  MOVLB  0
0144:  RCALL  000A
0146:  MOVFF  1E4,1F8
014A:  RCALL  002C
014C:  MOVLB  1
014E:  BRA    0118
....................     } 
....................  
....................     if(ms) { 
0150:  MOVF   xE2,W
0152:  IORWF  xE3,W
0154:  BZ    01B4
....................       ms = *addr++; // Read post-command delay time (ms) 
0156:  MOVF   xDF,W
0158:  MOVWF  03
015A:  MOVF   xDE,W
015C:  INCF   xDE,F
015E:  BTFSC  FD8.2
0160:  INCF   xDF,F
0162:  MOVWF  FF6
0164:  MOVFF  03,FF7
0168:  CLRF   FF8
016A:  MOVLW  01
016C:  MOVWF  FEA
016E:  MOVLW  E4
0170:  MOVWF  FE9
0172:  CLRF   xE6
0174:  MOVLW  01
0176:  MOVWF  xE5
0178:  MOVLB  0
017A:  RCALL  000A
017C:  MOVLB  1
017E:  CLRF   xE3
0180:  MOVFF  1E4,1E2
....................       if(ms == 255) ms = 500;     // If 255, delay for 500 ms 
0184:  INCFSZ xE2,W
0186:  BRA    0194
0188:  MOVF   xE3,F
018A:  BNZ   0194
018C:  MOVLW  01
018E:  MOVWF  xE3
0190:  MOVLW  F4
0192:  MOVWF  xE2
....................       delay_ms(ms); 
0194:  MOVFF  1E3,1E4
0198:  INCF   xE4,F
019A:  DECF   xE4,F
019C:  BTFSC  FD8.2
019E:  BRA    01AA
01A0:  SETF   xE5
01A2:  MOVLB  0
01A4:  RCALL  004C
01A6:  MOVLB  1
01A8:  BRA    019A
01AA:  MOVFF  1E2,1E5
01AE:  MOVLB  0
01B0:  RCALL  004C
01B2:  MOVLB  1
....................     } 
01B4:  BRA    00AA
....................   } 
....................   endWrite(); 
01B6:  MOVLB  0
01B8:  RCALL  0074
01BA:  GOTO   0316 (RETURN)
.................... } 
....................  
.................... /**************************************************************************/ 
.................... /*! 
....................     @brief  Initialization code for ST7789 display 
.................... */ 
.................... /**************************************************************************/ 
.................... void tft_init(void) { 
....................   #ifdef TFT_RST 
....................     output_high(TFT_RST); 
....................     output_drive(TFT_RST); 
....................     delay_ms(100); 
....................     output_low(TFT_RST); 
....................     delay_ms(100); 
....................     output_high(TFT_RST); 
....................     delay_ms(200); 
....................   #endif 
....................  
....................   #ifdef TFT_CS 
....................     output_high(TFT_CS); 
*
0300:  BCF    F94.5
0302:  BSF    F8B.5
....................     output_drive(TFT_CS); 
0304:  BCF    F94.5
....................   #endif 
....................  
....................   output_drive(TFT_DC); 
0306:  BCF    F94.6
....................  
....................   displayInit(cmd_240x240); 
0308:  MOVLW  7F
030A:  MOVLB  1
030C:  MOVWF  xDF
030E:  MOVLW  DC
0310:  MOVWF  xDE
0312:  MOVLB  0
0314:  BRA    007A
....................  
....................   _colstart = ST7789_240x240_XSTART; 
0316:  MOVLB  1
0318:  CLRF   xCF
....................   _rowstart = ST7789_240x240_YSTART; 
031A:  CLRF   xD0
....................   _height   = HEIGHT; 
031C:  MOVLW  A2
031E:  MOVWF  xCC
....................   _width    = WIDTH; 
0320:  MOVLW  84
0322:  MOVWF  xCB
....................   setRotation(3); 
0324:  MOVLW  03
0326:  MOVWF  xDE
0328:  MOVLB  0
032A:  BRA    01EA
....................   invertDisplay(0); 
032C:  MOVLB  1
032E:  CLRF   xDE
0330:  MOVLB  0
0332:  BRA    02E4
0334:  GOTO   09E8 (RETURN)
.................... } 
....................  
.................... /**************************************************************************/ 
.................... /*! 
....................   @brief  SPI displays set an address window rectangle for blitting pixels 
....................   @param  x  Top left corner x coordinate 
....................   @param  y  Top left corner x coordinate 
....................   @param  w  Width of window 
....................   @param  h  Height of window 
.................... */ 
.................... /**************************************************************************/ 
.................... void setAddrWindow(uint8_t x, uint8_t y, uint8_t w, uint8_t h) { 
....................   x += _xstart; 
0338:  MOVLB  1
033A:  MOVF   xCD,W
033C:  ADDWF  xF3,F
....................   y += _ystart; 
033E:  MOVF   xCE,W
0340:  ADDWF  xF4,F
....................  
....................   writeCommand(ST77XX_CASET); // Column addr set 
0342:  MOVLW  2A
0344:  MOVWF  xF7
0346:  MOVLB  0
0348:  RCALL  003C
....................   ST7789_SPI_XFER(0); 
034A:  MOVLB  1
034C:  CLRF   xF8
034E:  MOVLB  0
0350:  RCALL  002C
....................   ST7789_SPI_XFER(x); 
0352:  MOVFF  1F3,1F8
0356:  RCALL  002C
....................   ST7789_SPI_XFER(0); 
0358:  MOVLB  1
035A:  CLRF   xF8
035C:  MOVLB  0
035E:  RCALL  002C
....................   ST7789_SPI_XFER(x+w-1); 
0360:  MOVLB  1
0362:  MOVF   xF5,W
0364:  ADDWF  xF3,W
0366:  ADDLW  FF
0368:  MOVWF  xF7
036A:  MOVWF  xF8
036C:  MOVLB  0
036E:  RCALL  002C
....................  
....................   writeCommand(ST77XX_RASET); // Row addr set 
0370:  MOVLW  2B
0372:  MOVLB  1
0374:  MOVWF  xF7
0376:  MOVLB  0
0378:  RCALL  003C
....................   ST7789_SPI_XFER(0); 
037A:  MOVLB  1
037C:  CLRF   xF8
037E:  MOVLB  0
0380:  RCALL  002C
....................   ST7789_SPI_XFER(y); 
0382:  MOVFF  1F4,1F8
0386:  RCALL  002C
....................   ST7789_SPI_XFER(0); 
0388:  MOVLB  1
038A:  CLRF   xF8
038C:  MOVLB  0
038E:  RCALL  002C
....................   ST7789_SPI_XFER(y+h-1); 
0390:  MOVLB  1
0392:  MOVF   xF6,W
0394:  ADDWF  xF4,W
0396:  ADDLW  FF
0398:  MOVWF  xF7
039A:  MOVWF  xF8
039C:  MOVLB  0
039E:  RCALL  002C
....................  
....................   writeCommand(ST77XX_RAMWR); // write to RAM 
03A0:  MOVLW  2C
03A2:  MOVLB  1
03A4:  MOVWF  xF7
03A6:  MOVLB  0
03A8:  RCALL  003C
03AA:  RETURN 0
.................... } 
....................  
.................... /**************************************************************************/ 
.................... /*! 
....................     @brief  Set origin of (0,0) and orientation of TFT display 
....................     @param  m  The index for rotation, from 0-3 inclusive 
.................... */ 
.................... /**************************************************************************/ 
.................... void setRotation(uint8_t m) { 
*
01EA:  MOVLB  1
01EC:  CLRF   xDF
....................   uint8_t madctl = 0; 
....................  
....................   rotation = m & 3; // can't be higher than 3 
01EE:  MOVF   xDE,W
01F0:  ANDLW  03
01F2:  MOVWF  xD1
....................  
....................   switch (rotation) { 
01F4:  MOVF   xD1,W
01F6:  ADDLW  FC
01F8:  BC    025A
01FA:  ADDLW  04
01FC:  MOVLB  0
01FE:  GOTO   02C2
....................    case 0: 
....................      madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB; 
0202:  MOVLW  C0
0204:  MOVLB  1
0206:  MOVWF  xDF
....................      _xstart = _colstart; 
0208:  MOVFF  1CF,1CD
....................      _ystart = _rowstart; 
020C:  MOVFF  1D0,1CE
....................      _width = WIDTH; 
0210:  MOVLW  84
0212:  MOVWF  xCB
....................      _height = HEIGHT; 
0214:  MOVLW  A2
0216:  MOVWF  xCC
....................      break; 
0218:  BRA    025A
....................    case 1: 
....................      madctl  = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB; 
021A:  MOVLW  A0
021C:  MOVLB  1
021E:  MOVWF  xDF
....................      _xstart = _rowstart; 
0220:  MOVFF  1D0,1CD
....................      _ystart = _colstart; 
0224:  MOVFF  1CF,1CE
....................      _width = HEIGHT; 
0228:  MOVLW  A2
022A:  MOVWF  xCB
....................      _height = WIDTH; 
022C:  MOVLW  84
022E:  MOVWF  xCC
....................       
....................      break; 
0230:  BRA    025A
....................   case 2: 
....................      madctl  = ST77XX_MADCTL_RGB; 
0232:  MOVLB  1
0234:  CLRF   xDF
....................      _xstart = 0; 
0236:  CLRF   xCD
....................      _ystart = 0; 
0238:  CLRF   xCE
....................      _width = WIDTH; 
023A:  MOVLW  84
023C:  MOVWF  xCB
....................      _height = HEIGHT; 
023E:  MOVLW  A2
0240:  MOVWF  xCC
....................      break; 
0242:  BRA    025A
....................    case 3: 
....................      madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB; 
0244:  MOVLW  60
0246:  MOVLB  1
0248:  MOVWF  xDF
....................      _xstart = 0; 
024A:  CLRF   xCD
....................      _ystart = 0; 
024C:  CLRF   xCE
....................      _width = HEIGHT; 
024E:  MOVLW  A2
0250:  MOVWF  xCB
....................      _height = WIDTH; 
0252:  MOVLW  84
0254:  MOVWF  xCC
....................      break; 
0256:  BRA    025A
0258:  MOVLB  1
....................   } 
....................   X_MAX = ((_width/6)-2); 
025A:  MOVFF  1CB,1E3
025E:  MOVLW  06
0260:  MOVWF  xE4
0262:  MOVLB  0
0264:  RCALL  01BE
0266:  MOVLW  02
0268:  SUBWF  01,W
026A:  MOVLB  1
026C:  MOVWF  xD2
....................   X_BEGIN = (_width/X_MAX)/2; 
026E:  MOVFF  1CB,1E3
0272:  MOVFF  1D2,1E4
0276:  MOVLB  0
0278:  RCALL  01BE
027A:  BCF    FD8.0
027C:  RRCF   01,W
027E:  MOVLB  1
0280:  MOVWF  xD3
....................   Y_MAX = ((_height/8)-1); 
0282:  RRCF   xCC,W
0284:  MOVWF  00
0286:  RRCF   00,F
0288:  RRCF   00,F
028A:  MOVLW  1F
028C:  ANDWF  00,F
028E:  MOVF   00,W
0290:  ADDLW  FF
0292:  MOVWF  xD4
....................   Y_BEGIN = (_height/Y_MAX)+1; 
0294:  MOVFF  1CC,1E3
0298:  MOVFF  1D4,1E4
029C:  MOVLB  0
029E:  RCALL  01BE
02A0:  MOVLW  01
02A2:  ADDWF  01,W
02A4:  MOVLB  1
02A6:  MOVWF  xD5
....................   startWrite(); 
02A8:  MOVLB  0
02AA:  RCALL  0004
....................   writeCommand(ST77XX_MADCTL); 
02AC:  MOVLW  36
02AE:  MOVLB  1
02B0:  MOVWF  xF7
02B2:  MOVLB  0
02B4:  RCALL  003C
....................   ST7789_SPI_XFER(madctl); 
02B6:  MOVFF  1DF,1F8
02BA:  RCALL  002C
....................   endWrite(); 
02BC:  RCALL  0074
02BE:  GOTO   032C (RETURN)
.................... } 
....................  
.................... void drawPixel(uint8_t x, uint8_t y, uint16_t color) { 
....................   if((x < _width) && (y < _height)) { 
*
0496:  MOVLB  1
0498:  MOVF   xCB,W
049A:  SUBWF  xEF,W
049C:  BC    04E0
049E:  MOVF   xCC,W
04A0:  SUBWF  xF0,W
04A2:  BC    04E0
....................     startWrite(); 
04A4:  MOVLB  0
04A6:  RCALL  0004
....................     setAddrWindow(x, y, 1, 1); 
04A8:  MOVFF  1EF,1F3
04AC:  MOVFF  1F0,1F4
04B0:  MOVLW  01
04B2:  MOVLB  1
04B4:  MOVWF  xF5
04B6:  MOVWF  xF6
04B8:  MOVLB  0
04BA:  RCALL  0338
....................     ST7789_SPI_XFER(color >> 8); 
04BC:  MOVFF  1F2,1F3
04C0:  MOVLB  1
04C2:  CLRF   xF4
04C4:  MOVFF  1F2,1F8
04C8:  MOVLB  0
04CA:  RCALL  002C
....................     ST7789_SPI_XFER(color & 0xFF); 
04CC:  MOVLB  1
04CE:  MOVFF  1F1,1F3
04D2:  CLRF   xF4
04D4:  MOVFF  1F1,1F8
04D8:  MOVLB  0
04DA:  RCALL  002C
....................     endWrite(); 
04DC:  RCALL  0074
04DE:  MOVLB  1
....................   } 
04E0:  MOVLB  0
04E2:  RETURN 0
.................... } 
....................  
.................... /**************************************************************************/ 
.................... /*! 
....................    @brief    Draw a perfectly horizontal line (this is often optimized in a subclass!) 
....................     @param    x   Left-most x coordinate 
....................     @param    y   Left-most y coordinate 
....................     @param    w   Width in pixels 
....................    @param    color 16-bit 5-6-5 Color to fill with 
.................... */ 
.................... /**************************************************************************/ 
.................... void drawHLine(uint8_t x, uint8_t y, uint8_t w, uint16_t color) { 
....................   if( (x < _width) && (y < _height) && w) {    
*
056E:  MOVLB  1
0570:  MOVF   xCB,W
0572:  SUBWF  xE1,W
0574:  BC    05E4
0576:  MOVF   xCC,W
0578:  SUBWF  xE2,W
057A:  BC    05E4
057C:  MOVF   xE3,F
057E:  BZ    05E4
....................     uint8_t hi = color >> 8, lo = color; 
0580:  MOVFF  1E5,1E6
0584:  MOVFF  1E4,1E7
....................  
....................     if((x >= _width) || (y >= _height)) 
0588:  MOVF   xCB,W
058A:  SUBWF  xE1,W
058C:  BC    0594
058E:  MOVF   xCC,W
0590:  SUBWF  xE2,W
0592:  BNC   0596
....................       return; 
0594:  BRA    05E4
....................     if((x + w - 1) >= _width)   
0596:  MOVF   xE3,W
0598:  ADDWF  xE1,W
059A:  ADDLW  FF
059C:  SUBWF  xCB,W
059E:  BZ    05A2
05A0:  BC    05A8
....................       w = _width  - x; 
05A2:  MOVF   xE1,W
05A4:  SUBWF  xCB,W
05A6:  MOVWF  xE3
....................     startWrite(); 
05A8:  MOVLB  0
05AA:  RCALL  0004
....................     setAddrWindow(x, y, w, 1); 
05AC:  MOVFF  1E1,1F3
05B0:  MOVFF  1E2,1F4
05B4:  MOVFF  1E3,1F5
05B8:  MOVLW  01
05BA:  MOVLB  1
05BC:  MOVWF  xF6
05BE:  MOVLB  0
05C0:  RCALL  0338
....................     while (w--) { 
05C2:  MOVLB  1
05C4:  MOVF   xE3,W
05C6:  DECF   xE3,F
05C8:  XORLW  00
05CA:  BZ    05DE
....................       ST7789_SPI_XFER(hi); 
05CC:  MOVFF  1E6,1F8
05D0:  MOVLB  0
05D2:  RCALL  002C
....................       ST7789_SPI_XFER(lo); 
05D4:  MOVFF  1E7,1F8
05D8:  RCALL  002C
05DA:  BRA    05C2
05DC:  MOVLB  1
....................     } 
....................     endWrite(); 
05DE:  MOVLB  0
05E0:  RCALL  0074
05E2:  MOVLB  1
....................   } 
05E4:  MOVLB  0
05E6:  GOTO   0738 (RETURN)
.................... } 
....................  
.................... /**************************************************************************/ 
.................... /*! 
....................    @brief    Draw a perfectly vertical line (this is often optimized in a subclass!) 
....................     @param    x   Top-most x coordinate 
....................     @param    y   Top-most y coordinate 
....................     @param    h   Height in pixels 
....................    @param    color 16-bit 5-6-5 Color to fill with 
.................... */ 
.................... /**************************************************************************/ 
.................... void drawVLine(uint8_t x, uint8_t y, uint8_t h, uint16_t color) { 
....................   if( (x < _width) && (y < _height) && h) {   
....................     uint8_t hi = color >> 8, lo = color; 
....................     if((y + h - 1) >= _height)  
....................       h = _height - y; 
....................     startWrite(); 
....................     setAddrWindow(x, y, 1, h); 
....................     while (h--) { 
....................       ST7789_SPI_XFER(hi); 
....................       ST7789_SPI_XFER(lo); 
....................     } 
....................     endWrite(); 
....................   } 
.................... } 
....................  
.................... /**************************************************************************/ 
.................... /*! 
....................    @brief    Fill a rectangle completely with one color. Update in subclasses if desired! 
....................     @param    x   Top left corner x coordinate 
....................     @param    y   Top left corner y coordinate 
....................     @param    w   Width in pixels 
....................     @param    h   Height in pixels 
....................    @param    color 16-bit 5-6-5 Color to fill with 
.................... */ 
.................... /**************************************************************************/ 
.................... void fillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color) { 
....................   if(w && h) {                            // Nonzero width and height?   
*
03CE:  MOVLB  1
03D0:  MOVF   xE3,F
03D2:  BZ    0474
03D4:  MOVF   xE4,F
03D6:  BZ    0474
....................     uint8_t hi = color >> 8, lo = color; 
03D8:  MOVFF  1E6,1E7
03DC:  MOVFF  1E5,1E8
....................     if((x >= _width) || (y >= _height)) 
03E0:  MOVF   xCB,W
03E2:  SUBWF  xE1,W
03E4:  BC    03EC
03E6:  MOVF   xCC,W
03E8:  SUBWF  xE2,W
03EA:  BNC   03EE
....................       return; 
03EC:  BRA    0474
....................     if((x + w - 1) >= _width)   
03EE:  MOVF   xE3,W
03F0:  ADDWF  xE1,W
03F2:  ADDLW  FF
03F4:  SUBWF  xCB,W
03F6:  BZ    03FA
03F8:  BC    0400
....................       w = _width  - x; 
03FA:  MOVF   xE1,W
03FC:  SUBWF  xCB,W
03FE:  MOVWF  xE3
....................     if((y + h - 1) >= _height)  
0400:  MOVF   xE4,W
0402:  ADDWF  xE2,W
0404:  ADDLW  FF
0406:  SUBWF  xCC,W
0408:  BZ    040C
040A:  BC    0412
....................       h = _height - y; 
040C:  MOVF   xE2,W
040E:  SUBWF  xCC,W
0410:  MOVWF  xE4
....................     startWrite(); 
0412:  MOVLB  0
0414:  RCALL  0004
....................     setAddrWindow(x, y, w, h); 
0416:  MOVFF  1E1,1F3
041A:  MOVFF  1E2,1F4
041E:  MOVFF  1E3,1F5
0422:  MOVFF  1E4,1F6
0426:  RCALL  0338
....................     uint16_t px = (uint16_t)w * h; 
0428:  MOVLB  1
042A:  CLRF   xEC
042C:  MOVFF  1E3,1EB
0430:  MOVFF  1EC,1EE
0434:  MOVFF  1E3,1ED
0438:  CLRF   xF0
043A:  MOVFF  1E4,1EF
043E:  MOVLB  0
0440:  RCALL  03AC
0442:  MOVFF  02,1EA
0446:  MOVFF  01,1E9
....................     while (px--) { 
044A:  MOVLB  1
044C:  MOVFF  1EA,03
0450:  MOVF   xE9,W
0452:  BTFSC  FD8.2
0454:  DECF   xEA,F
0456:  DECF   xE9,F
0458:  IORWF  03,W
045A:  BZ    046E
....................       ST7789_SPI_XFER(hi); 
045C:  MOVFF  1E7,1F8
0460:  MOVLB  0
0462:  RCALL  002C
....................       ST7789_SPI_XFER(lo); 
0464:  MOVFF  1E8,1F8
0468:  RCALL  002C
046A:  BRA    044A
046C:  MOVLB  1
....................     } 
....................     endWrite(); 
046E:  MOVLB  0
0470:  RCALL  0074
0472:  MOVLB  1
....................   } 
0474:  MOVLB  0
0476:  RETURN 0
.................... } 
....................  
.................... /**************************************************************************/ 
.................... /*! 
....................    @brief    Fill the screen completely with one color. Update in subclasses if desired! 
....................     @param    color 16-bit 5-6-5 Color to fill with 
.................... */ 
.................... /**************************************************************************/ 
.................... void fillScreen(uint16_t color) { 
....................     fillRect(0, 0, _width, _height, color); 
0478:  MOVLB  1
047A:  CLRF   xE1
047C:  CLRF   xE2
047E:  MOVFF  1CB,1E3
0482:  MOVFF  1CC,1E4
0486:  MOVFF  1DF,1E6
048A:  MOVFF  1DE,1E5
048E:  MOVLB  0
0490:  RCALL  03CE
0492:  GOTO   0A0A (RETURN)
.................... } 
....................  
.................... /**************************************************************************/ 
.................... /*! 
....................     @brief  Invert the colors of the display (if supported by hardware). 
....................             Self-contained, no transaction setup required. 
....................     @param  i  true = inverted display, false = normal display. 
.................... */ 
.................... /**************************************************************************/ 
.................... void invertDisplay(bool i) { 
....................     startWrite(); 
*
02E4:  RCALL  0004
....................     writeCommand(i ? ST77XX_INVON : ST77XX_INVOFF); 
02E6:  MOVLB  1
02E8:  MOVF   xDE,F
02EA:  BZ    02F0
02EC:  MOVLW  21
02EE:  BRA    02F2
02F0:  MOVLW  20
02F2:  MOVWF  xDF
02F4:  MOVWF  xF7
02F6:  MOVLB  0
02F8:  RCALL  003C
....................     endWrite(); 
02FA:  RCALL  0074
02FC:  GOTO   0334 (RETURN)
.................... } 
....................  
.................... void tft_cursor_on(bool curs){ 
....................    cursor = curs; 
.................... } 
....................  
.................... void printDisp(uint8_t x, uint8_t y, uint16_t f_color, uint16_t b_color, int ch[5]){ 
....................    for(int i=0;i<5;i++){ 
*
04E4:  MOVLB  1
04E6:  CLRF   xEB
04E8:  MOVF   xEB,W
04EA:  SUBLW  04
04EC:  BNC   0568
....................       for(int j=0;j<8;j++){ 
04EE:  CLRF   xEC
04F0:  MOVF   xEC,W
04F2:  SUBLW  07
04F4:  BNC   0564
....................          if((ch[i]>>j)&1)  drawPixel(x+i, y-7+j, f_color); 
04F6:  MOVF   xEB,W
04F8:  ADDWF  xE9,W
04FA:  MOVWF  FE9
04FC:  MOVLW  00
04FE:  ADDWFC xEA,W
0500:  MOVWF  FEA
0502:  MOVFF  FEF,00
0506:  MOVF   xEC,W
0508:  MOVWF  01
050A:  BZ    0514
050C:  BCF    FD8.0
050E:  RRCF   00,F
0510:  DECFSZ 01,F
0512:  BRA    050C
0514:  MOVF   00,W
0516:  ANDLW  01
0518:  BZ    053E
051A:  MOVF   xEB,W
051C:  ADDWF  xE3,W
051E:  MOVWF  xED
0520:  MOVLW  07
0522:  SUBWF  xE4,W
0524:  ADDWF  xEC,W
0526:  MOVWF  xEE
0528:  MOVFF  1ED,1EF
052C:  MOVWF  xF0
052E:  MOVFF  1E6,1F2
0532:  MOVFF  1E5,1F1
0536:  MOVLB  0
0538:  RCALL  0496
053A:  BRA    055E
053C:  MOVLB  1
....................          else              drawPixel(x+i, y-7+j, b_color); 
053E:  MOVF   xEB,W
0540:  ADDWF  xE3,W
0542:  MOVWF  xED
0544:  MOVLW  07
0546:  SUBWF  xE4,W
0548:  ADDWF  xEC,W
054A:  MOVWF  xEE
054C:  MOVFF  1ED,1EF
0550:  MOVWF  xF0
0552:  MOVFF  1E8,1F2
0556:  MOVFF  1E7,1F1
055A:  MOVLB  0
055C:  RCALL  0496
055E:  MOVLB  1
0560:  INCF   xEC,F
0562:  BRA    04F0
....................       } 
0564:  INCF   xEB,F
0566:  BRA    04E8
....................    } 
0568:  MOVLB  0
056A:  GOTO   06D2 (RETURN)
.................... } 
....................  
.................... void tft_putc(char c){ 
....................    if(c=='\f'){ 
*
05EA:  MOVLB  1
05EC:  MOVF   xE0,W
05EE:  SUBLW  0C
05F0:  BNZ   061A
....................       fillRect(0, 0, CARRIAGE, Y, BG_COLOR); 
05F2:  CLRF   xE1
05F4:  CLRF   xE2
05F6:  MOVFF  1D8,1E3
05FA:  MOVFF  1D7,1E4
05FE:  MOVFF  1DC,1E6
0602:  MOVFF  1DB,1E5
0606:  MOVLB  0
0608:  RCALL  03CE
....................       CARRIAGE=X_BEGIN; 
060A:  MOVFF  1D3,1D8
....................       X=X_BEGIN; 
060E:  MOVFF  1D3,1D6
....................       Y=Y_BEGIN; 
0612:  MOVFF  1D5,1D7
....................    }else if(c=='\n'){ 
0616:  BRA    0738
0618:  MOVLB  1
061A:  MOVF   xE0,W
061C:  SUBLW  0A
061E:  BNZ   062A
....................       Y+=8; 
0620:  MOVLW  08
0622:  ADDWF  xD7,F
....................       X=X_BEGIN; 
0624:  MOVFF  1D3,1D6
....................    }else{ 
0628:  BRA    073A
....................       if(c>130){ 
062A:  MOVF   xE0,W
062C:  SUBLW  82
062E:  BC    0684
....................          if(c==176) c=47; 
0630:  MOVF   xE0,W
0632:  SUBLW  B0
0634:  BNZ   063C
0636:  MOVLW  2F
0638:  MOVWF  xE0
063A:  BRA    0684
....................          else if(c==196) c=35; 
063C:  MOVF   xE0,W
063E:  SUBLW  C4
0640:  BNZ   0648
0642:  MOVLW  23
0644:  MOVWF  xE0
0646:  BRA    0684
....................          else if(c==199) c=43; 
0648:  MOVF   xE0,W
064A:  SUBLW  C7
064C:  BNZ   0654
064E:  MOVLW  2B
0650:  MOVWF  xE0
0652:  BRA    0684
....................          else if(c==219) c=64; 
0654:  MOVF   xE0,W
0656:  SUBLW  DB
0658:  BNZ   0660
065A:  MOVLW  40
065C:  MOVWF  xE0
065E:  BRA    0684
....................          else if(c <216) c=(c%13)+33; 
0660:  MOVF   xE0,W
0662:  SUBLW  D7
0664:  BNC   067C
0666:  MOVFF  1E0,1E3
066A:  MOVLW  0D
066C:  MOVWF  xE4
066E:  MOVLB  0
0670:  RCALL  01BE
0672:  MOVLW  21
0674:  ADDWF  00,W
0676:  MOVLB  1
0678:  MOVWF  xE0
067A:  BRA    0684
....................          else c=(c %4)+59; 
067C:  MOVF   xE0,W
067E:  ANDLW  03
0680:  ADDLW  3B
0682:  MOVWF  xE0
....................       } 
....................       printDisp(X, Y, TX_COLOR, BG_COLOR, letra[c-32]); 
0684:  MOVLW  20
0686:  SUBWF  xE0,W
0688:  MOVWF  xE2
068A:  CLRF   xEE
068C:  MOVWF  xED
068E:  CLRF   xF0
0690:  MOVLW  05
0692:  MOVWF  xEF
0694:  MOVLB  0
0696:  RCALL  03AC
0698:  MOVFF  02,03
069C:  MOVF   01,W
069E:  ADDLW  04
06A0:  MOVWF  01
06A2:  MOVLW  00
06A4:  ADDWFC 03,F
06A6:  MOVFF  01,1E1
06AA:  MOVFF  03,1E2
06AE:  MOVFF  1D6,1E3
06B2:  MOVFF  1D7,1E4
06B6:  MOVFF  1DA,1E6
06BA:  MOVFF  1D9,1E5
06BE:  MOVFF  1DC,1E8
06C2:  MOVFF  1DB,1E7
06C6:  MOVFF  03,1EA
06CA:  MOVFF  01,1E9
06CE:  MOVLB  0
06D0:  BRA    04E4
....................       X+=6; 
06D2:  MOVLW  06
06D4:  MOVLB  1
06D6:  ADDWF  xD6,F
....................       if(X>CARRIAGE) CARRIAGE=X; 
06D8:  MOVF   xD6,W
06DA:  SUBWF  xD8,W
06DC:  BTFSS  FD8.0
06DE:  MOVFF  1D6,1D8
....................       if((X-X_BEGIN)/6>X_MAX){ 
06E2:  MOVF   xD3,W
06E4:  SUBWF  xD6,W
06E6:  MOVWF  xE2
06E8:  MOVWF  xE3
06EA:  MOVLW  06
06EC:  MOVWF  xE4
06EE:  MOVLB  0
06F0:  RCALL  01BE
06F2:  MOVF   01,W
06F4:  MOVLB  1
06F6:  SUBWF  xD2,W
06F8:  BC    0702
....................          X=X_BEGIN; 
06FA:  MOVFF  1D3,1D6
....................          Y+=8; 
06FE:  MOVLW  08
0700:  ADDWF  xD7,F
....................       } 
....................       if((Y-Y_BEGIN)/8>Y_MAX) Y=Y_BEGIN; 
0702:  MOVF   xD5,W
0704:  SUBWF  xD7,W
0706:  MOVWF  00
0708:  RRCF   00,F
070A:  RRCF   00,F
070C:  RRCF   00,F
070E:  MOVLW  1F
0710:  ANDWF  00,F
0712:  MOVF   00,W
0714:  SUBWF  xD4,W
0716:  BTFSS  FD8.0
0718:  MOVFF  1D5,1D7
....................       if(cursor)  drawHLine(X, Y, 5, TX_COLOR); 
071C:  BTFSS  xDD.0
071E:  BRA    073A
0720:  MOVFF  1D6,1E1
0724:  MOVFF  1D7,1E2
0728:  MOVLW  05
072A:  MOVWF  xE3
072C:  MOVFF  1DA,1E5
0730:  MOVFF  1D9,1E4
0734:  MOVLB  0
0736:  BRA    056E
0738:  MOVLB  1
....................    } 
073A:  MOVLB  0
073C:  RETURN 0
.................... } 
....................  
.................... void tft_gotoxy(uint8_t x, uint8_t y){ 
....................    X=X_BEGIN + 6*x; 
....................    Y=Y_BEGIN + 8*y; 
.................... } 
.................... // end of code. 
....................  
....................  
.................... int main(){ 
*
07BA:  CLRF   FF8
07BC:  BCF    FD0.7
07BE:  MOVLW  70
07C0:  MOVWF  FD3
07C2:  MOVF   FD3,W
07C4:  BCF    FC6.5
07C6:  MOVLW  40
07C8:  MOVWF  FC7
07CA:  MOVLW  30
07CC:  MOVWF  FC6
07CE:  BCF    F94.7
07D0:  BSF    F93.0
07D2:  BCF    F93.1
07D4:  MOVLB  1
07D6:  BCF    xDD.0
07D8:  MOVF   FC1,W
07DA:  ANDLW  C0
07DC:  IORLW  0F
07DE:  MOVWF  FC1
07E0:  MOVLW  07
07E2:  MOVWF  FB4
07E4:  BRA    09A6
07E6:  DATA 05,40
07E8:  DATA 04,00
07EA:  DATA D8,80
07EC:  DATA 7F,01
07EE:  DATA 01,01
07F0:  DATA 03,7D
07F2:  DATA 0A,12
07F4:  DATA 21,7D
07F6:  DATA 70,29
07F8:  DATA 27,21
07FA:  DATA 7F,38
07FC:  DATA 44,46
07FE:  DATA 45,38
0800:  DATA 1C,22
0802:  DATA 7F,22
0804:  DATA 1C,7C
0806:  DATA 55,56
0808:  DATA 54,54
080A:  DATA 7C,54
080C:  DATA 56,55
080E:  DATA 54,07
0810:  DATA 08,08
0812:  DATA 08,7F
0814:  DATA 20,41
0816:  DATA 3F,01
0818:  DATA 7F,30
081A:  DATA 48,45
081C:  DATA 40,20
081E:  DATA 3E,41
0820:  DATA C1,41
0822:  DATA 22,7F
0824:  DATA 49,49
0826:  DATA 49,73
0828:  DATA 7F,01
082A:  DATA 01,01
082C:  DATA 7F,00
082E:  DATA 30,30
0830:  DATA 00,00
0832:  DATA 00,02
0834:  DATA 05,02
0836:  DATA 00,3E
0838:  DATA 51,49
083A:  DATA 45,3E
083C:  DATA 00,42
083E:  DATA 7F,40
0840:  DATA 00,42
0842:  DATA 61,51
0844:  DATA 49,46
0846:  DATA 21,41
0848:  DATA 45,4B
084A:  DATA 31,18
084C:  DATA 14,12
084E:  DATA 7F,10
0850:  DATA 27,45
0852:  DATA 45,45
0854:  DATA 39,3C
0856:  DATA 4A,49
0858:  DATA 49,30
085A:  DATA 01,71
085C:  DATA 09,05
085E:  DATA 03,36
0860:  DATA 49,49
0862:  DATA 49,36
0864:  DATA 06,49
0866:  DATA 49,29
0868:  DATA 1E,00
086A:  DATA 36,36
086C:  DATA 00,00
086E:  DATA 7F,48
0870:  DATA 48,48
0872:  DATA 38,7F
0874:  DATA 40,7F
0876:  DATA 40,FF
0878:  DATA 7F,08
087A:  DATA 3E,41
087C:  DATA 3E,46
087E:  DATA 29,19
0880:  DATA 09,7F
0882:  DATA 02,01
0884:  DATA 51,09
0886:  DATA 06,7F
0888:  DATA 48,30
088A:  DATA 00,7F
088C:  DATA 7E,11
088E:  DATA 11,11
0890:  DATA 7E,7F
0892:  DATA 49,49
0894:  DATA 49,36
0896:  DATA 3E,41
0898:  DATA 41,41
089A:  DATA 22,7F
089C:  DATA 41,41
089E:  DATA 41,3E
08A0:  DATA 7F,49
08A2:  DATA 49,49
08A4:  DATA 41,7F
08A6:  DATA 09,09
08A8:  DATA 09,01
08AA:  DATA 3E,41
08AC:  DATA 49,49
08AE:  DATA 7A,7F
08B0:  DATA 08,08
08B2:  DATA 08,7F
08B4:  DATA 00,41
08B6:  DATA 7F,41
08B8:  DATA 00,20
08BA:  DATA 40,41
08BC:  DATA 3F,01
08BE:  DATA 7F,08
08C0:  DATA 14,22
08C2:  DATA 41,7F
08C4:  DATA 04,C0
08C6:  DATA 40,55
08C8:  DATA 80,7F
08CA:  DATA 01,02
08CC:  DATA 01,7F
08CE:  DATA 7F,04
08D0:  DATA 08,10
08D2:  DATA 7F,3E
08D4:  DATA 41,41
08D6:  DATA 41,3E
08D8:  DATA 7F,09
08DA:  DATA 09,09
08DC:  DATA 06,3E
08DE:  DATA 41,51
08E0:  DATA 21,5E
08E2:  DATA 7F,09
08E4:  DATA 19,29
08E6:  DATA 46,46
08E8:  DATA 49,49
08EA:  DATA 49,31
08EC:  DATA 01,01
08EE:  DATA 7F,01
08F0:  DATA 01,3F
08F2:  DATA 40,40
08F4:  DATA 40,3F
08F6:  DATA 1F,20
08F8:  DATA 40,20
08FA:  DATA 1F,3F
08FC:  DATA 40,38
08FE:  DATA 40,3F
0900:  DATA 63,14
0902:  DATA 08,14
0904:  DATA 63,07
0906:  DATA 08,70
0908:  DATA 08,07
090A:  DATA 61,51
090C:  DATA 49,45
090E:  DATA 43,41
0910:  DATA 49,49
0912:  DATA 49,36
0914:  DATA 7F,10
0916:  DATA 08,04
0918:  DATA 7F,7C
091A:  DATA 21,12
091C:  DATA 09,7C
091E:  DATA 0F,C0
0920:  DATA 00,82
0922:  DATA 80,20
0924:  DATA 54,54
0926:  DATA 54,78
0928:  DATA 7F,48
092A:  DATA 44,44
092C:  DATA 38,38
092E:  DATA 44,44
0930:  DATA 44,20
0932:  DATA 38,44
0934:  DATA 44,48
0936:  DATA 7F,38
0938:  DATA 54,54
093A:  DATA 54,18
093C:  DATA 08,7E
093E:  DATA 09,01
0940:  DATA 02,06
0942:  DATA 49,49
0944:  DATA 49,3F
0946:  DATA 7F,08
0948:  DATA 04,04
094A:  DATA 78,00
094C:  DATA 44,7D
094E:  DATA 40,00
0950:  DATA 20,40
0952:  DATA 42,3F
0954:  DATA 00,7F
0956:  DATA 10,28
0958:  DATA 44,00
095A:  DATA 00,41
095C:  DATA 7F,40
095E:  DATA 00,7C
0960:  DATA 04,18
0962:  DATA 04,78
0964:  DATA 7C,08
0966:  DATA 04,04
0968:  DATA 7C,38
096A:  DATA 44,44
096C:  DATA 44,38
096E:  DATA 7C,14
0970:  DATA 14,14
0972:  DATA 08,08
0974:  DATA 14,14
0976:  DATA 18,7C
0978:  DATA 7C,08
097A:  DATA 04,04
097C:  DATA 08,48
097E:  DATA 54,54
0980:  DATA 54,24
0982:  DATA 02,3F
0984:  DATA 42,40
0986:  DATA 20,3C
0988:  DATA 40,40
098A:  DATA 20,7C
098C:  DATA 1C,20
098E:  DATA 40,20
0990:  DATA 1C,3C
0992:  DATA 40,30
0994:  DATA 40,3C
0996:  DATA 44,28
0998:  DATA 10,28
099A:  DATA 44,0C
099C:  DATA 50,50
099E:  DATA 50,3C
09A0:  DATA 44,64
09A2:  DATA 54,4C
09A4:  DATA 44,00
09A6:  MOVLW  00
09A8:  MOVWF  FF8
09AA:  MOVLW  07
09AC:  MOVWF  FF7
09AE:  MOVLW  E6
09B0:  MOVWF  FF6
09B2:  TBLRD*+
09B4:  MOVF   FF5,W
09B6:  MOVWF  00
09B8:  XORLW  00
09BA:  BZ    09E2
09BC:  TBLRD*+
09BE:  MOVF   FF5,W
09C0:  MOVWF  01
09C2:  BTFSC  FE8.7
09C4:  BRA    09D0
09C6:  ANDLW  0F
09C8:  MOVWF  FEA
09CA:  TBLRD*+
09CC:  MOVFF  FF5,FE9
09D0:  BTFSC  01.6
09D2:  TBLRD*+
09D4:  BTFSS  01.6
09D6:  TBLRD*+
09D8:  MOVFF  FF5,FEE
09DC:  DCFSNZ 00,F
09DE:  BRA    09B2
09E0:  BRA    09D4
09E2:  CLRF   FF8
....................    tft_init(); 
09E4:  MOVLB  0
09E6:  BRA    0300
....................  
....................    X = X_BEGIN; 
09E8:  MOVFF  1D3,1D6
....................    Y= Y_BEGIN; 
09EC:  MOVFF  1D5,1D7
....................    CARRIAGE = X; 
09F0:  MOVFF  1D6,1D8
....................    TX_COLOR = ST7789_WHITE; 
09F4:  MOVLB  1
09F6:  SETF   xDA
09F8:  SETF   xD9
....................    BG_COLOR = ST7789_BLACK; 
09FA:  CLRF   xDC
09FC:  CLRF   xDB
....................  
....................    fillScreen(BG_COLOR); 
09FE:  MOVFF  1DC,1DF
0A02:  MOVFF  1DB,1DE
0A06:  MOVLB  0
0A08:  BRA    0478
....................  
....................    printf(tft_putc,"%u\n",X_MAX); 
0A0A:  MOVFF  1D2,1DE
0A0E:  MOVLW  1B
0A10:  MOVLB  1
0A12:  MOVWF  xDF
0A14:  MOVLB  0
0A16:  RCALL  073E
0A18:  MOVLW  0A
0A1A:  MOVLB  1
0A1C:  MOVWF  xE0
0A1E:  MOVLB  0
0A20:  RCALL  05EA
....................    printf(tft_putc,"%u\n",X_BEGIN); 
0A22:  MOVFF  1D3,1DE
0A26:  MOVLW  1B
0A28:  MOVLB  1
0A2A:  MOVWF  xDF
0A2C:  MOVLB  0
0A2E:  RCALL  073E
0A30:  MOVLW  0A
0A32:  MOVLB  1
0A34:  MOVWF  xE0
0A36:  MOVLB  0
0A38:  RCALL  05EA
....................    printf(tft_putc,"%u\n",Y_MAX); 
0A3A:  MOVFF  1D4,1DE
0A3E:  MOVLW  1B
0A40:  MOVLB  1
0A42:  MOVWF  xDF
0A44:  MOVLB  0
0A46:  RCALL  073E
0A48:  MOVLW  0A
0A4A:  MOVLB  1
0A4C:  MOVWF  xE0
0A4E:  MOVLB  0
0A50:  RCALL  05EA
....................    printf(tft_putc,"%u\n",Y_BEGIN); 
0A52:  MOVFF  1D5,1DE
0A56:  MOVLW  1B
0A58:  MOVLB  1
0A5A:  MOVWF  xDF
0A5C:  MOVLB  0
0A5E:  RCALL  073E
0A60:  MOVLW  0A
0A62:  MOVLB  1
0A64:  MOVWF  xE0
0A66:  MOVLB  0
0A68:  RCALL  05EA
....................  
....................    printf(tft_putc,"%u\n",_width); 
0A6A:  MOVFF  1CB,1DE
0A6E:  MOVLW  1B
0A70:  MOVLB  1
0A72:  MOVWF  xDF
0A74:  MOVLB  0
0A76:  RCALL  073E
0A78:  MOVLW  0A
0A7A:  MOVLB  1
0A7C:  MOVWF  xE0
0A7E:  MOVLB  0
0A80:  RCALL  05EA
....................    printf(tft_putc,"%u\n",_height); 
0A82:  MOVFF  1CC,1DE
0A86:  MOVLW  1B
0A88:  MOVLB  1
0A8A:  MOVWF  xDF
0A8C:  MOVLB  0
0A8E:  RCALL  073E
0A90:  MOVLW  0A
0A92:  MOVLB  1
0A94:  MOVWF  xE0
0A96:  MOVLB  0
0A98:  RCALL  05EA
....................    printf(tft_putc,"%u\n",_xstart); 
0A9A:  MOVFF  1CD,1DE
0A9E:  MOVLW  1B
0AA0:  MOVLB  1
0AA2:  MOVWF  xDF
0AA4:  MOVLB  0
0AA6:  RCALL  073E
0AA8:  MOVLW  0A
0AAA:  MOVLB  1
0AAC:  MOVWF  xE0
0AAE:  MOVLB  0
0AB0:  RCALL  05EA
....................    printf(tft_putc,"%u\n",_ystart); 
0AB2:  MOVFF  1CE,1DE
0AB6:  MOVLW  1B
0AB8:  MOVLB  1
0ABA:  MOVWF  xDF
0ABC:  MOVLB  0
0ABE:  RCALL  073E
0AC0:  MOVLW  0A
0AC2:  MOVLB  1
0AC4:  MOVWF  xE0
0AC6:  MOVLB  0
0AC8:  RCALL  05EA
....................    printf(tft_putc,"%u\n",_colstart); 
0ACA:  MOVFF  1CF,1DE
0ACE:  MOVLW  1B
0AD0:  MOVLB  1
0AD2:  MOVWF  xDF
0AD4:  MOVLB  0
0AD6:  RCALL  073E
0AD8:  MOVLW  0A
0ADA:  MOVLB  1
0ADC:  MOVWF  xE0
0ADE:  MOVLB  0
0AE0:  RCALL  05EA
....................    printf(tft_putc,"%u\n",_rowstart); 
0AE2:  MOVFF  1D0,1DE
0AE6:  MOVLW  1B
0AE8:  MOVLB  1
0AEA:  MOVWF  xDF
0AEC:  MOVLB  0
0AEE:  RCALL  073E
0AF0:  MOVLW  0A
0AF2:  MOVLB  1
0AF4:  MOVWF  xE0
0AF6:  MOVLB  0
0AF8:  RCALL  05EA
....................    printf(tft_putc,"%u\n",rotation); 
0AFA:  MOVFF  1D1,1DE
0AFE:  MOVLW  1B
0B00:  MOVLB  1
0B02:  MOVWF  xDF
0B04:  MOVLB  0
0B06:  RCALL  073E
0B08:  MOVLW  0A
0B0A:  MOVLB  1
0B0C:  MOVWF  xE0
0B0E:  MOVLB  0
0B10:  RCALL  05EA
....................     
....................  /* _width,     ///< Display width as modified by current rotation 
....................   _height,    ///< Display height as modified by current rotation 
....................   _xstart,    ///< Internal framebuffer X offset 
....................   _ystart,    ///< Internal framebuffer Y offset 
....................   _colstart,  ///< Some displays need this changed to offset 
....................   _rowstart,  ///< Some displays need this changed to offset 
....................   rotation;   ///< Display rotation (0 thru 3)*/ 
....................  
....................    return 0; 
0B12:  MOVLW  00
0B14:  MOVWF  01
.................... } 
....................  
0B16:  SLEEP 

Configuration Fuses:
   Word  1: C827   PLL12 CPUDIV1 USBDIV INTRC_IO FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 0700   CCP2C1 PBADEN LPT1OSC NOMCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB

ROM data:
007FDC: 09 01 80 96 11 80 FF 3A 81 55 0A 36 01 08 2A 04    .......:.U.6..*.
007FEC: 00 00 00 84 2B 04 00 00 00 A2 21 80 0A 13 80 0A    ....+.....!.....
007FFC: 29 80 FF                                           )..
