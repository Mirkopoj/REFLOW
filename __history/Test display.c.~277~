#include <18f2550.h>
#fuses nomclr, nowdt, nolvp, noprotect
#define freq 8000000
#use delay(int=freq)

#use SPI(SPI1, MODE = 2, BITS = 8, STREAM = ST7789)

#define TFT_DC    PIN_C6     // data/command pin
#define TFT_CS    PIN_C5   // chip select pin, use it if the display has CS pin

#include "ST7789.c"

   #define LCD_ENABLE_PIN  PIN_A5
   #define LCD_RS_PIN      PIN_A1
   #define LCD_RW_PIN      PIN_A4
   
   #define LCD_DATA4       PIN_A6  
   #define LCD_DATA5       PIN_C0
   #define LCD_DATA6       PIN_C1 
   #define LCD_DATA7       PIN_C2

//#include <lcd.c>

uint8_t X = X_BEGIN;
uint8_t Y= Y_BEGIN;
uint8_t CARRIAGE = X;
uint16_t TX_COLOR = ST7789_WHITE;
uint16_t BG_COLOR = ST7789_BLACK;

   int letra[91][5] = {
      {0x00, 0x00, 0x00, 0x00, 0x00}, // Espacio
      {0x7F, 0x01, 0x01, 0x01, 0x03}, // ! -> Ã (Gama ruso)
      {0x7D, 0x0A, 0x12, 0x21, 0x7D}, // " -> Ñ (Eñe ~ + N)
      {0x70, 0x29, 0x27, 0x21, 0x7f}, // # -> Ä (Delta ruso)
      {0x38, 0x44, 0x46, 0x45, 0x38}, // $ -> Ó 
      {0x1C, 0x22, 0x7F, 0x22, 0x1C}, // % -> Ô (Fi ruso)
      {0x7C, 0x55, 0x56, 0x54, 0x54}, // & -> È (É con el tilde a la izq `)
      {0x7C, 0x54, 0x56, 0x55, 0x54}, // ' -> É
      {0x07, 0x08, 0x08, 0x08, 0x7F}, // ( -> × (Ch ruso)
      {0x20, 0x41, 0x3F, 0x01, 0x7F}, // ) -> Ë (Lambda ruso)
      {0x30, 0x48, 0x45, 0x40, 0x20}, // * -> ¿ (? invertido)
      {0x3E, 0x41, 0xC1, 0x41, 0x22}, // + -> Ç
      {0x7F, 0x49, 0x49, 0x49, 0x73}, // , -> Á (B ruso)
      {0x7F, 0x01, 0x01, 0x01, 0x7F}, // - -> Ï (Pi ruso)
      {0x00, 0x30, 0x30, 0x00, 0x00}, // .
      {0x00, 0x02, 0x05, 0x02, 0x00}, // / -> °
      {0x3E, 0x51, 0x49, 0x45, 0x3E}, // 0
      {0x00, 0x42, 0x7F, 0x40, 0x00}, // 1
      {0x42, 0x61, 0x51, 0x49, 0x46}, // 2
      {0x21, 0x41, 0x45, 0x4B, 0x31}, // 3
      {0x18, 0x14, 0x12, 0x7F, 0x10}, // 4
      {0x27, 0x45, 0x45, 0x45, 0x39}, // 5
      {0x3C, 0x4A, 0x49, 0x49, 0x30}, // 6
      {0x01, 0x71, 0x09, 0x05, 0x03}, // 7
      {0x36, 0x49, 0x49, 0x49, 0x36}, // 8
      {0x06, 0x49, 0x49, 0x29, 0x1E}, // 9
      {0x00, 0x36, 0x36, 0x00, 0x00}, // :
      {0x7F, 0x48, 0x48, 0x48, 0x38}, // ; -> Ü (Mini b rusa)
      {0x7F, 0x40, 0x7F, 0x40, 0xFF}, // < -> Ù (Sh rusa)
      {0x7F, 0x08, 0x3E, 0x41, 0x3E}, // = -> Þ (Iu ruso)
      {0x46, 0x29, 0x19, 0x09, 0x7F}, // > -> ß (Ia ruso)
      {0x02, 0x01, 0x51, 0x09, 0x06}, // ?
      {0x7F, 0x48, 0x30, 0x00, 0x7F}, // @ -> Û (Bi ruso)
      {0x7E, 0x11, 0x11, 0x11, 0x7E}, // A
      {0x7F, 0x49, 0x49, 0x49, 0x36}, // B
      {0x3E, 0x41, 0x41, 0x41, 0x22}, // C
      {0x7F, 0x41, 0x41, 0x41, 0x3E}, // D
      {0x7F, 0x49, 0x49, 0x49, 0X41}, // E
      {0x7F, 0x09, 0x09, 0x09, 0x01}, // F
      {0x3E, 0x41, 0x49, 0x49, 0x7A}, // G
      {0x7F, 0x08, 0x08, 0x08, 0x7F}, // H
      {0x00, 0x41, 0x7F, 0x41, 0x00}, // I
      {0x20, 0x40, 0x41, 0x3F, 0x01}, // J
      {0x7F, 0x08, 0x14, 0x22, 0x41}, // K
      {0x7F, 0x40, 0x40, 0x40, 0x40}, // L
      {0x7F, 0x01, 0x02, 0x01, 0x7F}, // M
      {0x7F, 0x04, 0x08, 0x10, 0x7F}, // N
      {0x3E, 0x41, 0x41, 0x41, 0x3E}, // O
      {0x7F, 0x09, 0x09, 0x09, 0x06}, // P
      {0x3E, 0x41, 0x51, 0x21, 0x5E}, // Q
      {0x7F, 0x09, 0x19, 0x29, 0x46}, // R
      {0x46, 0x49, 0x49, 0x49, 0x31}, // S
      {0x01, 0x01, 0x7F, 0x01, 0x01}, // T
      {0x3F, 0x40, 0x40, 0x40, 0x3F}, // U
      {0x1F, 0x20, 0x40, 0x20, 0x1F}, // V
      {0x3F, 0x40, 0x38, 0x40, 0x3F}, // W
      {0x63, 0x14, 0x08, 0x14, 0x63}, // X
      {0x07, 0x08, 0x70, 0x08, 0x07}, // Y
      {0x61, 0x51, 0x49, 0x45, 0x43}, // Z
      {0x41, 0x49, 0x49, 0x49, 0x36}, // [ -> Ç (Zeta ruso)
      {0x7F, 0x10, 0x08, 0x04, 0x7F}, // \ -> È (I ruso)
      {0x7C, 0x21, 0x12, 0x09, 0x7C}, // ] -> É (Ij ruso)
      {0x00, 0x00, 0x00, 0x00, 0x00}, // ^
      {0x00, 0x00, 0x00, 0x00, 0x00}, // _
      {0x00, 0x00, 0x00, 0x00, 0x00}, // `
      {0x20, 0x54, 0x54, 0x54, 0x78}, // a
      {0x7F, 0x48, 0x44, 0x44, 0x38}, // b
      {0x38, 0x44, 0x44, 0x44, 0x20}, // c
      {0x38, 0x44, 0x44, 0x48, 0x7F}, // d
      {0x38, 0x54, 0x54, 0x54, 0x18}, // e
      {0x08, 0x7E, 0x09, 0x01, 0x02}, // f
      {0x06, 0x49, 0x49, 0x49, 0x3F}, // g
      {0x7F, 0x08, 0x04, 0x04, 0x78}, // h
      {0x00, 0x44, 0x7D, 0x40, 0x00}, // i
      {0x20, 0x40, 0x42, 0x3F, 0x00}, // j
      {0x7F, 0x10, 0x28, 0x44, 0x00}, // k
      {0x00, 0x41, 0x7F, 0x40, 0x00}, // l
      {0x7C, 0x04, 0x18, 0x04, 0x78}, // m
      {0x7C, 0x08, 0x04, 0x04, 0x7C}, // n
      {0x38, 0x44, 0x44, 0x44, 0x38}, // o
      {0x7C, 0x14, 0x14, 0x14, 0x08}, // p
      {0x08, 0x14, 0x14, 0x18, 0x7C}, // q
      {0x7C, 0x08, 0x04, 0x04, 0x08}, // r
      {0x48, 0x54, 0x54, 0x54, 0x24}, // s
      {0x02, 0x3F, 0x42, 0x40, 0x20}, // t
      {0x3C, 0x40, 0x40, 0x20, 0x7C}, // u
      {0x1C, 0x20, 0x40, 0x20, 0x1C}, // v
      {0x3C, 0x40, 0x30, 0x40, 0x3C}, // w
      {0x44, 0x28, 0x10, 0x28, 0x44}, // x
      {0x0C, 0x50, 0x50, 0x50, 0x3C}, // y
      {0x44, 0x64, 0x54, 0x4C, 0x44}  // z
   };

void printDisp(uint8_t x, uint8_t y, uint16_t color, int ch[5]);
void lcd_putc(char c);
void printDisp2(uint8_t x, uint8_t y, uint16_t color, int ch[8]);

int main(){
   tft_init();
   //lcd_init();

   fillScreen(BG_COLOR);

   printf(lcd_putc,"%u\n",X_MAX);
   printf(lcd_putc,"%u\n",X_BEGIN);
   printf(lcd_putc,"%u\n",Y_MAX);
   printf(lcd_putc,"%u\n",Y_BEGIN);

   printf(lcd_putc,"%u\n",_width);
   printf(lcd_putc,"%u\n",_height);
   printf(lcd_putc,"%u\n",_xstart);
   printf(lcd_putc,"%u\n",_ystart);
   printf(lcd_putc,"%u\n",_colstart);
   printf(lcd_putc,"%u\n",_rowstart);
   printf(lcd_putc,"%u\n",rotation);
 /* _width,     ///< Display width as modified by current rotation
  _height,    ///< Display height as modified by current rotation
  _xstart,    ///< Internal framebuffer X offset
  _ystart,    ///< Internal framebuffer Y offset
  _colstart,  ///< Some displays need this changed to offset
  _rowstart,  ///< Some displays need this changed to offset
  rotation;   ///< Display rotation (0 thru 3)*/
   
   while(1);
}

void printDisp(uint8_t x, uint8_t y, uint16_t color, int ch[5]){
   for(int i=0;i<5;i++){
      for(int j=0;j<8;j++){
         if((ch[i]>>j)&1)drawPixel(x+i, y-7+j, color);
      }
   }
}

void lcd_putc(char c){
   if(c=='\f'){
      fillRect(0, 0, CARRIAGE, Y, BG_COLOR);
      CARRIAGE=X_BEGIN;
      X=X_BEGIN;
      Y=Y_BEGIN;
   }else if(c=='\n'){
      Y+=8;
      X=X_BEGIN;
   }else{
      if(c>130){
         if(c==176) c=47;
         else if(c==196) c=35;
         else if(c==199) c=43;
         else if(c==219) c=64;
         else if(c <216) c=(c%13)+33;
         else c=(c %4)+59;
      }
      printDisp(X, Y, TX_COLOR, letra[c-32]);
      X+=6;
      if(X>CARRIAGE) CARRIAGE=X;
      if((X-X_BEGIN)/6>X_MAX){
         X=X_BEGIN;
         Y+=8;
      }
      if((Y-Y_BEGIN)/8>Y_MAX) Y=Y_BEGIN;
   }
}


