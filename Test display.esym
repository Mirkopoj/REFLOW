D G "__PCH__" 0 170 ""5.070""
D G "__DEVICE__" 0 170 "2550"
D G "__DATE__" 0 170 ""22-dic.-21""
D G "__TIME__" 0 170 ""11:18:25""
D G "_UNICODE" 0 170 ""?""
D G "__EVAL" 0 170 ""?"" "Standard Header file for the PIC18F2550 device ////////////////"
c L "set_tris_a" 1 3 6 "FUNCTION"
f N "set_tris_a" 1 45 ""
v L "value" 1 45 "int8" `55 
f B "set_tris_a" 1 45 "void(int8 value)" `54 
f N "set_tris_b" 1 46 ""
v L "value" 1 46 "int8" `57 
f B "set_tris_b" 1 46 "void(int8 value)" `56 
f N "set_tris_c" 1 47 ""
v L "value" 1 47 "int8" `59 
f B "set_tris_c" 1 47 "void(int8 value)" `58 
f N "set_tris_e" 1 48 ""
v L "value" 1 48 "int8" `61 
f B "set_tris_e" 1 48 "void(int8 value)" `60 
f N "get_tris_a" 1 49 ""
f B "get_tris_a" 1 49 "int8()" `62 
f N "get_tris_b" 1 50 ""
f B "get_tris_b" 1 50 "int8()" `63 
f N "get_tris_c" 1 51 ""
f B "get_tris_c" 1 51 "int8()" `64 
f N "get_tris_e" 1 52 ""
f B "get_tris_e" 1 52 "int8()" `65 
f N "output_a" 1 53 ""
v L "value" 1 53 "int8" `67 
f B "output_a" 1 53 "void(int8 value)" `66 
f N "output_b" 1 54 ""
v L "value" 1 54 "int8" `69 
f B "output_b" 1 54 "void(int8 value)" `68 
f N "output_c" 1 55 ""
v L "value" 1 55 "int8" `71 
f B "output_c" 1 55 "void(int8 value)" `70 
f N "output_e" 1 56 ""
v L "value" 1 56 "int8" `73 
f B "output_e" 1 56 "void(int8 value)" `72 
f N "input_a" 1 57 ""
f B "input_a" 1 57 "int8()" `74 
f N "input_b" 1 58 ""
f B "input_b" 1 58 "int8()" `75 
f N "input_c" 1 59 ""
f B "input_c" 1 59 "int8()" `76 
f N "input_e" 1 60 ""
f B "input_e" 1 60 "int8()" `77 
f N "input_change_a" 1 61 ""
f B "input_change_a" 1 61 "int8()" `78 
f N "input_change_b" 1 62 ""
f B "input_change_b" 1 62 "int8()" `79 
f N "input_change_c" 1 63 ""
f B "input_change_c" 1 63 "int8()" `80 
f N "input_change_e" 1 64 ""
f B "input_change_e" 1 64 "int8()" `81 
f N "port_b_pullups" 1 65 ""
v L "value" 1 65 "int8" `83 
f B "port_b_pullups" 1 65 "void(int8 value)" `82 
f N "input" 1 66 ""
v L "pin" 1 66 "int16" `85 
f B "input" 1 66 "int8(int16 pin)" `84 
f N "input_state" 1 67 ""
v L "pin" 1 67 "int16" `87 
f B "input_state" 1 67 "int8(int16 pin)" `86 
f N "output_low" 1 68 ""
v L "pin" 1 68 "int16" `89 
f B "output_low" 1 68 "void(int16 pin)" `88 
f N "output_high" 1 69 ""
v L "pin" 1 69 "int16" `91 
f B "output_high" 1 69 "void(int16 pin)" `90 
f N "output_toggle" 1 70 ""
v L "pin" 1 70 "int16" `93 
f B "output_toggle" 1 70 "void(int16 pin)" `92 
f N "output_bit" 1 71 ""
v L "pin" 1 71 "int16" `95 
v L "level" 1 71 "int8" `96 
f B "output_bit" 1 71 "void(int16 pin,int8 level)" `94 
f N "output_float" 1 72 ""
v L "pin" 1 72 "int16" `98 
f B "output_float" 1 72 "void(int16 pin)" `97 
f N "output_drive" 1 73 ""
v L "pin" 1 73 "int16" `100 
f B "output_drive" 1 73 "void(int16 pin)" `99  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 77 "31744"
d G "PIN_A1" 1 78 "31745"
d G "PIN_A2" 1 79 "31746"
d G "PIN_A3" 1 80 "31747"
d G "PIN_A4" 1 81 "31748"
d G "PIN_A5" 1 82 "31749"
d G "PIN_A6" 1 83 "31750"
d G "PIN_B0" 1 85 "31752"
d G "PIN_B1" 1 86 "31753"
d G "PIN_B2" 1 87 "31754"
d G "PIN_B3" 1 88 "31755"
d G "PIN_B4" 1 89 "31756"
d G "PIN_B5" 1 90 "31757"
d G "PIN_B6" 1 91 "31758"
d G "PIN_B7" 1 92 "31759"
d G "PIN_C0" 1 94 "31760"
d G "PIN_C1" 1 95 "31761"
d G "PIN_C2" 1 96 "31762"
d G "PIN_C4" 1 97 "31764"
d G "PIN_C5" 1 98 "31765"
d G "PIN_C6" 1 99 "31766"
d G "PIN_C7" 1 100 "31767"
d G "PIN_E3" 1 102 "31779"
d G "FALSE" 1 105 "0"
d G "TRUE" 1 106 "1"
d G "BYTE" 1 108 "int8"
d G "BOOLEAN" 1 109 "int1"
d G "getc" 1 111 "getch"
d G "fgetc" 1 112 "getch"
d G "getchar" 1 113 "getch"
d G "putc" 1 114 "putchar"
d G "fputc" 1 115 "putchar"
d G "fgets" 1 116 "gets"
d G "fputs" 1 117 "puts"
c L "output_drive" 1 3 3 "FUNCTION"
f N "restart_cause" 1 122 ""
f B "restart_cause" 1 122 "int8()" `101 
f N "reset_cpu" 1 123 ""
f B "reset_cpu" 1 123 "void()" `102 
f N "sleep" 1 124 ""
f B "sleep" 1 124 "void()" `103 
f N "sleep" 1 125 ""
v L "type" 1 125 "int8" `105 
f B "sleep" 1 125 "void(int8 type)" `104  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 1 127 "7"
d G "MCLR_FROM_SLEEP" 1 128 "11"
d G "MCLR_FROM_RUN" 1 129 "15"
d G "NORMAL_POWER_UP" 1 130 "12"
d G "BROWNOUT_RESTART" 1 131 "14"
d G "WDT_FROM_SLEEP" 1 132 "3"
d G "RESET_INSTRUCTION" 1 133 "0"
d G "SLEEP_FULL" 1 136 "0" "Default"
d G "SLEEP_IDLE" 1 137 "1" "Clock and peripherals don't stop"
c L "sleep" 1 3 5 "FUNCTION"
f N "setup_timer_0" 1 144 ""
v L "mode" 1 144 "int8" `107 
f B "setup_timer_0" 1 144 "void(int8 mode)" `106 
f N "set_timer0" 1 145 ""
v L "value" 1 145 "int16" `109 
f B "set_timer0" 1 145 "void(int16 value)" `108 
f N "get_timer0" 1 146 ""
f B "get_timer0" 1 146 "int16()" `110 
f N "setup_counters" 1 147 ""
v L "mode" 1 147 "int8" `112 
v L "prescaler" 1 147 "int8" `113 
f B "setup_counters" 1 147 "void(int8 mode,int8 prescaler)" `111 
f N "set_rtcc" 1 148 ""
v L "value" 1 148 "int16" `115 
f B "set_rtcc" 1 148 "void(int16 value)" `114 
f N "get_rtcc" 1 149 ""
f B "get_rtcc" 1 149 "int16()" `116  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 151 "0"
d G "T0_EXT_L_TO_H" 1 152 "32"
d G "T0_EXT_H_TO_L" 1 153 "48"
d G "T0_DIV_1" 1 155 "8"
d G "T0_DIV_2" 1 156 "0"
d G "T0_DIV_4" 1 157 "1"
d G "T0_DIV_8" 1 158 "2"
d G "T0_DIV_16" 1 159 "3"
d G "T0_DIV_32" 1 160 "4"
d G "T0_DIV_64" 1 161 "5"
d G "T0_DIV_128" 1 162 "6"
d G "T0_DIV_256" 1 163 "7"
d G "T0_OFF" 1 165 "0x80"
d G "T0_8_BIT" 1 167 "0x40"
d G "RTCC_INTERNAL" 1 171 "0"
d G "RTCC_EXT_L_TO_H" 1 172 "32"
d G "RTCC_EXT_H_TO_L" 1 173 "48"
d G "RTCC_DIV_1" 1 174 "8"
d G "RTCC_DIV_2" 1 175 "0"
d G "RTCC_DIV_4" 1 176 "1"
d G "RTCC_DIV_8" 1 177 "2"
d G "RTCC_DIV_16" 1 178 "3"
d G "RTCC_DIV_32" 1 179 "4"
d G "RTCC_DIV_64" 1 180 "5"
d G "RTCC_DIV_128" 1 181 "6"
d G "RTCC_DIV_256" 1 182 "7"
d G "RTCC_OFF" 1 183 "0x80"
d G "RTCC_8_BIT" 1 184 "0x40"
c L "get_rtcc" 1 3 8 "FUNCTION"
f N "setup_wdt" 1 195 ""
v L "mode" 1 195 "int16" `118 
f B "setup_wdt" 1 195 "void(int16 mode)" `117 
f N "restart_wdt" 1 196 ""
f B "restart_wdt" 1 196 "void()" `119  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 1 198 "0x100"
d G "WDT_OFF" 1 199 "0"
d G "WDT_4MS" 1 201 "0x300"
d G "WDT_8MS" 1 202 "0x500"
d G "WDT_16MS" 1 203 "0x700"
d G "WDT_32MS" 1 204 "0x900"
d G "WDT_64MS" 1 205 "0xB00"
d G "WDT_128MS" 1 206 "0xD00"
d G "WDT_256MS" 1 207 "0xF00"
d G "WDT_512MS" 1 208 "0x1100"
d G "WDT_1S" 1 209 "0x1300"
d G "WDT_2S" 1 210 "0x1500"
d G "WDT_4S" 1 211 "0x1700"
d G "WDT_8S" 1 212 "0x1900"
d G "WDT_16" 1 213 "0x1B00"
d G "WDT_32S" 1 214 "0x1D00"
d G "WDT_64S" 1 215 "0x1F00"
d G "WDT_128S" 1 216 "0x2100"
c L "restart_wdt" 1 3 3 "FUNCTION"
f N "setup_timer_1" 1 221 ""
v L "mode" 1 221 "int16" `121 
f B "setup_timer_1" 1 221 "void(int16 mode)" `120 
f N "get_timer1" 1 222 ""
f B "get_timer1" 1 222 "int16()" `122 
f N "set_timer1" 1 223 ""
v L "value" 1 223 "int16" `124 
f B "set_timer1" 1 223 "void(int16 value)" `123  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 226 "0"
d G "T1_INTERNAL" 1 227 "0x85"
d G "T1_EXTERNAL" 1 228 "0x87"
d G "T1_EXTERNAL_SYNC" 1 229 "0x83"
d G "T1_CLK_OUT" 1 231 "8"
d G "T1_DIV_BY_1" 1 233 "0"
d G "T1_DIV_BY_2" 1 234 "0x10"
d G "T1_DIV_BY_4" 1 235 "0x20"
d G "T1_DIV_BY_8" 1 236 "0x30"
c L "set_timer1" 1 3 3 "FUNCTION"
f N "setup_timer_2" 1 241 ""
v L "mode" 1 241 "int8" `126 
v L "period" 1 241 "int8" `127 
v L "postscale" 1 241 "int8" `128 
f B "setup_timer_2" 1 241 "void(int8 mode,int8 period,int8 postscale)" `125 
f N "get_timer2" 1 242 ""
f B "get_timer2" 1 242 "int8()" `129 
f N "set_timer2" 1 243 ""
v L "value" 1 243 "int8" `131 
f B "set_timer2" 1 243 "void(int8 value)" `130  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 245 "0"
d G "T2_DIV_BY_1" 1 246 "4"
d G "T2_DIV_BY_4" 1 247 "5"
d G "T2_DIV_BY_16" 1 248 "6"
c L "set_timer2" 1 3 3 "FUNCTION"
f N "setup_timer_3" 1 253 ""
v L "mode" 1 253 "int16" `133 
f B "setup_timer_3" 1 253 "void(int16 mode)" `132 
f N "get_timer3" 1 254 ""
f B "get_timer3" 1 254 "int16()" `134 
f N "set_timer3" 1 255 ""
v L "value" 1 255 "int16" `136 
f B "set_timer3" 1 255 "void(int16 value)" `135  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 1 258 "0"
d G "T3_INTERNAL" 1 259 "0x85"
d G "T3_EXTERNAL" 1 260 "0x87"
d G "T3_EXTERNAL_SYNC" 1 261 "0x83"
d G "T3_DIV_BY_1" 1 263 "0"
d G "T3_DIV_BY_2" 1 264 "0x10"
d G "T3_DIV_BY_4" 1 265 "0x20"
d G "T3_DIV_BY_8" 1 266 "0x30"
d G "T3_CCP1_TO_2" 1 269 "0x48"
d G "T3_CCP2" 1 270 "0x8"
c L "set_timer3" 1 3 4 "FUNCTION"
f N "setup_ccp1" 1 276 ""
v L "mode" 1 276 "int32" `138 
f B "setup_ccp1" 1 276 "void(int32 mode)" `137 
f N "setup_ccp1" 1 277 ""
v L "mode" 1 277 "int32" `140 
v L "pwm" 1 277 "int8" `141 
f B "setup_ccp1" 1 277 "void(int32 mode,int8 pwm)" `139 
f N "set_pwm1_duty" 1 278 ""
v L "value" 1 278 "int16" `143 
f B "set_pwm1_duty" 1 278 "void(int16 value)" `142  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 280 "0"
d G "CCP_CAPTURE_FE" 1 281 "0x04"
d G "CCP_CAPTURE_RE" 1 282 "0x05"
d G "CCP_CAPTURE_DIV_4" 1 283 "0x06"
d G "CCP_CAPTURE_DIV_16" 1 284 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 1 285 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 286 "0x09"
d G "CCP_COMPARE_INT" 1 287 "0x0A"
d G "CCP_COMPARE_INT_AND_TOGGLE" 1 288 "0x02"
d G "CCP_COMPARE_RESET_TIMER" 1 289 "0x0B"
d G "CCP_PWM" 1 290 "0x0C"
d G "CCP_PWM_PLUS_1" 1 291 "0x1c"
d G "CCP_PWM_PLUS_2" 1 292 "0x2c"
d G "CCP_PWM_PLUS_3" 1 293 "0x3c"
c L "set_pwm1_duty" 1 3 1 "FUNCTION"
c L "set_pwm1_duty" 1 3 1 "FUNCTION"
f N "setup_ccp2" 1 301 ""
v L "mode" 1 301 "int32" `148 
f B "setup_ccp2" 1 301 "void(int32 mode)" `147 
f N "setup_ccp2" 1 302 ""
v L "mode" 1 302 "int32" `150 
v L "pwm" 1 302 "int8" `151 
f B "setup_ccp2" 1 302 "void(int32 mode,int8 pwm)" `149 
f N "set_pwm2_duty" 1 303 ""
v L "value" 1 303 "int16" `153 
f B "set_pwm2_duty" 1 303 "void(int16 value)" `152 
c L "set_pwm2_duty" 1 3 3 "FUNCTION"
f N "setup_spi" 1 310 ""
v L "mode" 1 310 "int32" `158 
f B "setup_spi" 1 310 "void(int32 mode)" `157 
f N "spi_write" 1 311 ""
v L "value" 1 311 "int8" `160 
f B "spi_write" 1 311 "void(int8 value)" `159 
f N "spi_read" 1 312 ""
f B "spi_read" 1 312 "int8()" `161 
f N "spi_read" 1 313 ""
v L "value" 1 313 "int8" `163 
f B "spi_read" 1 313 "int8(int8 value)" `162 
f N "spi_data_is_in" 1 314 ""
f B "spi_data_is_in" 1 314 "int8()" `164 
f N "setup_spi2" 1 315 ""
v L "mode" 1 315 "int32" `166 
f B "setup_spi2" 1 315 "void(int32 mode)" `165 
f N "spi_write2" 1 316 ""
v L "value" 1 316 "int8" `168 
f B "spi_write2" 1 316 "void(int8 value)" `167 
f N "spi_read2" 1 317 ""
f B "spi_read2" 1 317 "int8()" `169 
f N "spi_read2" 1 318 ""
v L "value" 1 318 "int8" `171 
f B "spi_read2" 1 318 "int8(int8 value)" `170 
f N "spi_data_is_in2" 1 319 ""
f B "spi_data_is_in2" 1 319 "int8()" `172  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 321 "0x00"
d G "SPI_MASTER" 1 322 "0x20"
d G "SPI_SLAVE" 1 323 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 324 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 325 "0x00"
d G "SPI_CLK_DIV_4" 1 326 "0x00"
d G "SPI_CLK_DIV_16" 1 327 "0x01"
d G "SPI_CLK_DIV_64" 1 328 "0x02"
d G "SPI_CLK_T2" 1 329 "0x03"
d G "SPI_SS_DISABLED" 1 330 "0x01"
d G "SPI_XMIT_L_TO_H" 1 332 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 333 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 335 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 336 "0x8000"
d G "SPI_L_TO_H" 1 339 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 340 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in2" 1 3 2 "FUNCTION"
f N "setup_uart" 1 344 ""
v L "baud" 1 344 "int32" `174 
f B "setup_uart" 1 344 "void(int32 baud)" `173 
f N "setup_uart" 1 345 ""
v L "baud" 1 345 "int32" `176 
v L "stream" 1 345 "int8" `177 
f B "setup_uart" 1 345 "void(int32 baud,int8 stream)" `175 
f N "setup_uart" 1 346 ""
v L "baud" 1 346 "int32" `179 
v L "stream" 1 346 "int8" `180 
v L "clock" 1 346 "int32" `181 
f B "setup_uart" 1 346 "void(int32 baud,int8 stream,int32 clock)" `178 
f N "set_uart_speed" 1 347 ""
v L "baud" 1 347 "int32" `183 
f B "set_uart_speed" 1 347 "void(int32 baud)" `182 
f N "set_uart_speed" 1 348 ""
v L "baud" 1 348 "int32" `185 
v L "stream" 1 348 "int8" `186 
f B "set_uart_speed" 1 348 "void(int32 baud,int8 stream)" `184 
f N "set_uart_speed" 1 349 ""
v L "baud" 1 349 "int32" `188 
v L "stream" 1 349 "int8" `189 
v L "clock" 1 349 "int32" `190 
f B "set_uart_speed" 1 349 "void(int32 baud,int8 stream,int32 clock)" `187  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 353 "2"
d G "UART_DATA" 1 354 "4"
d G "UART_AUTODETECT" 1 355 "8"
d G "UART_AUTODETECT_NOWAIT" 1 356 "9"
d G "UART_WAKEUP_ON_RDA" 1 357 "10"
d G "UART_SEND_BREAK" 1 358 "13"
c L "set_uart_speed" 1 3 3 "FUNCTION"
f N "setup_comparator" 1 362 ""
v L "mode" 1 362 "int32" `192 
f B "setup_comparator" 1 362 "void(int32 mode)" `191  "Constants used in setup_comparator() are:"
d G "A0_A3_A1_A3" 1 364 "0xfff04"
d G "A0_A3_A1_A2_OUT_ON_A4_A5" 1 365 "0xfcf03"
d G "A0_A3_A1_A3_OUT_ON_A4_A5" 1 366 "0xbcf05"
d G "NC_NC_NC_NC" 1 367 "0x0ff07"
d G "A0_A3_A1_A2" 1 368 "0xfff02"
d G "A0_A3_NC_NC_OUT_ON_A4" 1 369 "0x9ef01"
d G "A0_VR_A1_VR" 1 370 "0x3ff06"
d G "A3_VR_A2_VR" 1 371 "0xcff0e"
d G "CP1_INVERT" 1 372 "0x0000010"
d G "CP2_INVERT" 1 373 "0x0000020"
c L "setup_comparator" 1 3 2 "FUNCTION"
f N "setup_vref" 1 380 ""
v L "mode" 1 380 "int8" `196 
f B "setup_vref" 1 380 "void(int8 mode)" `195  "Constants used in setup_vref() are:"
d G "VREF_LOW" 1 382 "0xa0"
d G "VREF_HIGH" 1 383 "0x80"
d G "VREF_F5" 1 385 "0x40"
d G "VREF_COMP" 1 386 "0x10"
c L "setup_vref" 1 3 2 "FUNCTION"
f N "setup_low_volt_detect" 1 390 ""
v L "mode" 1 390 "int8" `198 
f B "setup_low_volt_detect" 1 390 "void(int8 mode)" `197  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 1 392 "0x1F"
d G "LVD_45" 1 393 "0x1E"
d G "LVD_42" 1 394 "0x1D"
d G "LVD_40" 1 395 "0x1C"
d G "LVD_38" 1 396 "0x1B"
d G "LVD_36" 1 397 "0x1A"
d G "LVD_35" 1 398 "0x19"
d G "LVD_33" 1 399 "0x18"
d G "LVD_30" 1 400 "0x17"
d G "LVD_28" 1 401 "0x16"
d G "LVD_27" 1 402 "0x15"
d G "LVD_25" 1 403 "0x14"
d G "LVD_24" 1 404 "0x13"
d G "LVD_23" 1 405 "0x12"
d G "LVD_22" 1 406 "0x11"
d G "LVD_21" 1 407 "0x10"
d G "LVD_TRIGGER_BELOW" 1 409 "0"
d G "LVD_TRIGGER_ABOVE" 1 410 "0x80"
c L "setup_low_volt_detect" 1 3 2 "FUNCTION"
f N "setup_oscillator" 1 415 ""
v L "mode" 1 415 "int16" `200 
f B "setup_oscillator" 1 415 "int8(int16 mode)" `199 
f N "setup_oscillator" 1 416 ""
v L "mode" 1 416 "int16" `202 
v L "tune" 1 416 "sint8" `203 
f B "setup_oscillator" 1 416 "int8(int16 mode,sint8 tune)" `201  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 1 419 "0"
d G "OSC_125KHZ" 1 420 "0x10"
d G "OSC_250KHZ" 1 421 "0x20"
d G "OSC_500KHZ" 1 422 "0x30"
d G "OSC_1MHZ" 1 423 "0x40"
d G "OSC_2MHZ" 1 424 "0x50"
d G "OSC_4MHZ" 1 425 "0x60"
d G "OSC_8MHZ" 1 426 "0x70"
d G "OSC_TIMER1" 1 428 "1"
d G "OSC_INTRC" 1 429 "2"
d G "OSC_NORMAL" 1 430 "0"
d G "OSC_IDLE_MODE" 1 432 "0x80"
d G "OSC_31250" 1 433 "0x8000"
d G "OSC_STATE_STABLE" 1 437 "4"
d G "OSC_STATE_EXT_RUNNING" 1 438 "8"
c L "setup_oscillator" 1 3 4 "FUNCTION"
f N "setup_adc" 1 445 ""
v L "mode" 1 445 "int16" `205 
f B "setup_adc" 1 445 "void(int16 mode)" `204 
f N "read_adc" 1 446 ""
f B "read_adc" 1 446 "int8()" `206 
f N "read_adc" 1 447 ""
v L "mode" 1 447 "int8" `208 
f B "read_adc" 1 447 "int8(int8 mode)" `207 
f N "read_adc" 1 448 ""
f G "read_adc" 1 448 "int16()" `209 
f N "read_adc" 1 449 ""
v L "mode" 1 449 "int8" `210 
f G "read_adc" 1 449 "int16(int8 mode,int8 pins)" `209 
f N "adc_done" 1 450 ""
f B "adc_done" 1 450 "int8(int8 mode,int8 pins)" `209  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 452 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 453 "0x100"
d G "ADC_CLOCK_DIV_4" 1 454 "0x04"
d G "ADC_CLOCK_DIV_8" 1 455 "0x01"
d G "ADC_CLOCK_DIV_16" 1 456 "0x05"
d G "ADC_CLOCK_DIV_32" 1 457 "0x02"
d G "ADC_CLOCK_DIV_64" 1 458 "0x06"
d G "ADC_CLOCK_INTERNAL" 1 459 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 1 461 "0x00"
d G "ADC_TAD_MUL_2" 1 462 "0x08"
d G "ADC_TAD_MUL_4" 1 463 "0x10"
d G "ADC_TAD_MUL_6" 1 464 "0x18"
d G "ADC_TAD_MUL_8" 1 465 "0x20"
d G "ADC_TAD_MUL_12" 1 466 "0x28"
d G "ADC_TAD_MUL_16" 1 467 "0x30"
d G "ADC_TAD_MUL_20" 1 468 "0x38"
c L "adc_done" 1 3 1 "FUNCTION"
f N "setup_adc_ports" 1 471 ""
v L "pins" 1 471 "int8" `211 
f B "setup_adc_ports" 1 471 "void(int8 pins)" `210 
f N "setup_adc_ports" 1 472 ""
v L "pins" 1 472 "int8" `213 
v L "reference" 1 472 "int8" `214 
f B "setup_adc_ports" 1 472 "void(int8 pins,int8 reference)" `212 
f N "set_analog_pins" 1 473 ""
v L "pins" 1 473 "int8" `216 
f B "set_analog_pins" 1 473 "void(int8 pins)" `215 
f N "set_analog_pins" 1 474 ""
v L "pins" 1 474 "int8" `218 
v L "reference" 1 474 "int8" `219 
f B "set_analog_pins" 1 474 "void(int8 pins,int8 reference)" `217 
f N "set_adc_channel" 1 475 ""
v L "channel" 1 475 "int8" `221 
f B "set_adc_channel" 1 475 "void(int8 channel)" `220  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "NO_ANALOGS" 1 478 "0x0F" "None"
d G "ALL_ANALOG" 1 479 "0x00" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4 B0"
d G "AN0_TO_AN11" 1 480 "0x03" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4"
d G "AN0_TO_AN10" 1 481 "0x04" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1"
d G "AN0_TO_AN9" 1 482 "0x05" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3"
d G "AN0_TO_AN8" 1 483 "0x06" "A0 A1 A2 A3 A5 E0 E1 E2 B2"
d G "AN0_TO_AN7" 1 484 "0x07" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_TO_AN6" 1 485 "0x08" "A0 A1 A2 A3 A5 E0 E1"
d G "AN0_TO_AN5" 1 486 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_TO_AN4" 1 487 "0x0A" "A0 A1 A2 A3 A5"
d G "AN0_TO_AN3" 1 488 "0x0B" "A0 A1 A2 A3"
d G "AN0_TO_AN2" 1 489 "0x0C" "A0 A1 A2"
d G "AN0_TO_AN1" 1 490 "0x0D" "A0 A1"
d G "AN0" 1 491 "0x0E" "A0"
d G "AN0_TO_AN11_ANALOG" 1 492 "0x03" "!old only provided for compatibility"
d G "AN0_TO_AN10_ANALOG" 1 493 "0x04" "!old only provided for compatibility"
d G "AN0_TO_AN9_ANALOG" 1 494 "0x05" "!old only provided for compatibility"
d G "AN0_TO_AN8_ANALOG" 1 495 "0x06" "!old only provided for compatibility"
d G "AN0_TO_AN7_ANALOG" 1 496 "0x07" "!old only provided for compatibility"
d G "AN0_TO_AN6_ANALOG" 1 497 "0x08" "!old only provided for compatibility"
d G "AN0_TO_AN5_ANALOG" 1 498 "0x09" "!old only provided for compatibility"
d G "AN0_TO_AN4_ANALOG" 1 499 "0x0A" "!old only provided for compatibility"
d G "AN0_TO_AN3_ANALOG" 1 500 "0x0B" "!old only provided for compatibility"
d G "AN0_TO_AN2_ANALOG" 1 501 "0x0C" "!old only provided for compatibility"
d G "AN0_TO_AN1_ANALOG" 1 502 "0x0D" "!old only provided for compatibility"
d G "AN0_ANALOG" 1 503 "0x0E" "!old only provided for compatibility"
d G "VSS_VDD" 1 506 "0x00" "Range 0-Vdd"
d G "VREF_VREF" 1 507 "0x30" "Range VrefL-VrefH"
d G "VREF_VDD" 1 508 "0x20" "Range VrefL-Vdd"
d G "VSS_VREF" 1 509 "0x10" "Range 0-VrefH"
d G "ADC_START_AND_READ" 1 512 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 513 "1"
d G "ADC_READ_ONLY" 1 514 "6"
c L "set_adc_channel" 1 3 3 "FUNCTION"
f N "abs" 1 520 ""
v L "x" 1 520 "sint8" `223 
f B "abs" 1 520 "sint8(sint8 x)" `222 
f N "abs" 1 521 ""
v L "x" 1 521 "sint16" `225 
f B "abs" 1 521 "sint16(sint16 x)" `224 
f N "abs" 1 522 ""
v L "x" 1 522 "sint32" `227 
f B "abs" 1 522 "sint32(sint32 x)" `226 
f N "abs" 1 523 ""
v L "x" 1 523 "float" `229 
f B "abs" 1 523 "float(float x)" `228 
f N "_mul" 1 524 ""
v L "??65535" 1 524 "int8" `231 
v L "??65535" 1 524 "int8" `232 
f B "_mul" 1 524 "int16(int8 ,int8 )" `230 
f N "_mul" 1 525 ""
v L "??65535" 1 525 "sint8" `234 
v L "??65535" 1 525 "sint8" `235 
f B "_mul" 1 525 "sint16(sint8 ,sint8 )" `233 
f N "_mul" 1 526 ""
v L "??65535" 1 526 "int16" `237 
v L "??65535" 1 526 "int16" `238 
f B "_mul" 1 526 "int32(int16 ,int16 )" `236 
f N "_mul" 1 527 ""
v L "??65535" 1 527 "sint16" `240 
v L "??65535" 1 527 "sint16" `241 
f B "_mul" 1 527 "sint32(sint16 ,sint16 )" `239  "Memory Manipulation Prototypes:"
f N "read_bank" 1 530 ""
v L "bank" 1 530 "int8" `243 
v L "offset" 1 530 "int8" `244 
f B "read_bank" 1 530 "int8(int8 bank,int8 offset)" `242 
f N "write_bank" 1 531 ""
v L "bank" 1 531 "int8" `246 
v L "offset" 1 531 "int8" `247 
v L "value" 1 531 "int8" `248 
f B "write_bank" 1 531 "void(int8 bank,int8 offset,int8 value)" `245 
f N "strcpy" 1 532 ""
v L "dest" 1 532 "*int8" `250 
v L "src" 1 532 "*int8" `251 
f B "strcpy" 1 532 "void(*int8 dest,*int8 src)" `249 
f N "memset" 1 533 ""
v L "destination" 1 533 "*int8" `253 
v L "value" 1 533 "int8" `254 
v L "num" 1 533 "int16" `255 
f B "memset" 1 533 "void(*int8 destination,int8 value,int16 num)" `252 
f N "memcpy" 1 534 ""
v L "destination" 1 534 "*int8" `257 
v L "source" 1 534 "*int8" `258 
v L "num" 1 534 "int16" `259 
f B "memcpy" 1 534 "void(*int8 destination,*int8 source,int16 num)" `256  "String Prototypes:"
f N "toupper" 1 537 ""
v L "cvalue" 1 537 "int8" `261 
f B "toupper" 1 537 "int8(int8 cvalue)" `260 
f N "tolower" 1 538 ""
v L "cvalue" 1 538 "int8" `263 
f B "tolower" 1 538 "int8(int8 cvalue)" `262 
f N "sprintf" 1 539 ""
v L "string" 1 539 "*int8" `265 
v L "cstring" 1 539 "*int8" `266 
f B "sprintf" 1 539 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `264  "Data Manipulators Prototypes:"
f N "shift_left" 1 542 ""
v L "address" 1 542 "*int8" `269 
v L "bytes" 1 542 "int8" `270 
v L "value" 1 542 "int8" `271 
f B "shift_left" 1 542 "int8(*int8 address,int8 bytes,int8 value)" `268 
f N "shift_right" 1 543 ""
v L "address" 1 543 "*int8" `273 
v L "bytes" 1 543 "int8" `274 
v L "value" 1 543 "int8" `275 
f B "shift_right" 1 543 "int8(*int8 address,int8 bytes,int8 value)" `272 
f N "rotate_left" 1 544 ""
v L "address" 1 544 "*int8" `277 
v L "bytes" 1 544 "int8" `278 
f B "rotate_left" 1 544 "void(*int8 address,int8 bytes)" `276 
f N "rotate_right" 1 545 ""
v L "address" 1 545 "*int8" `280 
v L "bytes" 1 545 "int8" `281 
f B "rotate_right" 1 545 "void(*int8 address,int8 bytes)" `279 
f N "swap" 1 546 ""
v L "value" 1 546 "int8" `283 
f B "swap" 1 546 "void(int8 value)" `282 
f N "make8" 1 547 ""
v L "var" 1 547 "int16" `285 
v L "offset" 1 547 "int8" `286 
f B "make8" 1 547 "int8(int16 var,int8 offset)" `284 
f N "make8" 1 548 ""
v L "var" 1 548 "int32" `288 
v L "offset" 1 548 "int8" `289 
f B "make8" 1 548 "int8(int32 var,int8 offset)" `287 
f N "make16" 1 549 ""
v L "varhigh" 1 549 "int8" `291 
v L "varlow" 1 549 "int8" `292 
f B "make16" 1 549 "int16(int8 varhigh,int8 varlow)" `290 
f N "make32" 1 550 ""
v L "var1" 1 550 "int16" `294 
f B "make32" 1 550 "int32(int16 var1)" `293 
f N "make32" 1 551 ""
v L "var1" 1 551 "int16" `296 
v L "var2" 1 551 "int16" `297 
f B "make32" 1 551 "int32(int16 var1,int16 var2)" `295 
f N "make32" 1 552 ""
v L "var1" 1 552 "int16" `299 
v L "var2" 1 552 "int8" `300 
f B "make32" 1 552 "int32(int16 var1,int8 var2)" `298 
f N "make32" 1 553 ""
v L "var1" 1 553 "int16" `302 
v L "var2" 1 553 "int8" `303 
v L "var3" 1 553 "int8" `304 
f B "make32" 1 553 "int32(int16 var1,int8 var2,int8 var3)" `301 
f N "make32" 1 554 ""
v L "var1" 1 554 "int8" `306 
f B "make32" 1 554 "int32(int8 var1)" `305 
f N "make32" 1 555 ""
v L "var1" 1 555 "int8" `308 
v L "var2" 1 555 "int8" `309 
f B "make32" 1 555 "int32(int8 var1,int8 var2)" `307 
f N "make32" 1 556 ""
v L "var1" 1 556 "int8" `311 
v L "var2" 1 556 "int8" `312 
v L "var3" 1 556 "int8" `313 
f B "make32" 1 556 "int32(int8 var1,int8 var2,int8 var3)" `310 
f N "make32" 1 557 ""
v L "var1" 1 557 "int8" `315 
v L "var2" 1 557 "int8" `316 
v L "var3" 1 557 "int8" `317 
v L "var4" 1 557 "int8" `318 
f B "make32" 1 557 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `314 
f N "make32" 1 558 ""
v L "var1" 1 558 "int8" `320 
v L "var2" 1 558 "int16" `321 
f B "make32" 1 558 "int32(int8 var1,int16 var2)" `319 
f N "make32" 1 559 ""
v L "var1" 1 559 "int8" `323 
v L "var2" 1 559 "int16" `324 
v L "var3" 1 559 "int8" `325 
f B "make32" 1 559 "int32(int8 var1,int16 var2,int8 var3)" `322 
f N "make32" 1 560 ""
v L "var1" 1 560 "int8" `327 
v L "var2" 1 560 "int8" `328 
v L "var3" 1 560 "int16" `329 
f B "make32" 1 560 "int32(int8 var1,int8 var2,int16 var3)" `326 
f N "bit_set" 1 561 ""
v L "var" 1 561 "int8" `331 
v L "bit" 1 561 "int8" `332 
f B "bit_set" 1 561 "void(int8 var,int8 bit)" `330 
f N "bit_set" 1 562 ""
v L "var" 1 562 "int16" `334 
v L "bit" 1 562 "int8" `335 
f B "bit_set" 1 562 "void(int16 var,int8 bit)" `333 
f N "bit_set" 1 563 ""
v L "var" 1 563 "int32" `337 
v L "bit" 1 563 "int8" `338 
f B "bit_set" 1 563 "void(int32 var,int8 bit)" `336 
f N "bit_clear" 1 564 ""
v L "var" 1 564 "int8" `340 
v L "bit" 1 564 "int8" `341 
f B "bit_clear" 1 564 "void(int8 var,int8 bit)" `339 
f N "bit_clear" 1 565 ""
v L "var" 1 565 "int16" `343 
v L "bit" 1 565 "int8" `344 
f B "bit_clear" 1 565 "void(int16 var,int8 bit)" `342 
f N "bit_clear" 1 566 ""
v L "var" 1 566 "int32" `346 
v L "bit" 1 566 "int8" `347 
f B "bit_clear" 1 566 "void(int32 var,int8 bit)" `345 
f N "bit_test" 1 567 ""
v L "var" 1 567 "int8" `349 
v L "bit" 1 567 "int8" `350 
f B "bit_test" 1 567 "int8(int8 var,int8 bit)" `348 
f N "bit_test" 1 568 ""
v L "var" 1 568 "int16" `352 
v L "bit" 1 568 "int8" `353 
f B "bit_test" 1 568 "int8(int16 var,int8 bit)" `351 
f N "bit_test" 1 569 ""
v L "var" 1 569 "int32" `355 
v L "bit" 1 569 "int8" `356 
f B "bit_test" 1 569 "int8(int32 var,int8 bit)" `354  "#use delay() Prototypes:"
f N "delay_cycles" 1 572 ""
v L "count" 1 572 "int8" `358 
f B "delay_cycles" 1 572 "void(int8 count)" `357 
f N "delay_ms" 1 573 ""
v L "time" 1 573 "int16" `360 
f B "delay_ms" 1 573 "void(int16 time)" `359 
f N "delay_us" 1 574 ""
v L "time" 1 574 "int16" `362 
f B "delay_us" 1 574 "void(int16 time)" `361  "#use rs232() Prototypes:"
f N "putchar" 1 577 ""
v L "cdata" 1 577 "int8" `364 
f B "putchar" 1 577 "void(int8 cdata)" `363 
f N "putchar" 1 578 ""
v L "cdata" 1 578 "int8" `366 
v L "stream" 1 578 "int8" `367 
f B "putchar" 1 578 "void(int8 cdata,int8 stream)" `365 
f N "puts" 1 579 ""
v L "string" 1 579 "*int8" `369 
f B "puts" 1 579 "void(*int8 string)" `368 
f N "puts" 1 580 ""
v L "string" 1 580 "*int8" `371 
v L "stream" 1 580 "int8" `372 
f B "puts" 1 580 "void(*int8 string,int8 stream)" `370 
f N "getch" 1 581 ""
f B "getch" 1 581 "int8()" `373 
f N "getch" 1 582 ""
v L "stream" 1 582 "int8" `375 
f B "getch" 1 582 "int8(int8 stream)" `374 
f N "gets" 1 583 ""
v L "string" 1 583 "*int8" `377 
f B "gets" 1 583 "void(*int8 string)" `376 
f N "gets" 1 584 ""
v L "string" 1 584 "*int8" `379 
v L "stream" 1 584 "int8" `380 
f B "gets" 1 584 "void(*int8 string,int8 stream)" `378 
f N "kbhit" 1 585 ""
f B "kbhit" 1 585 "int8()" `381 
f N "kbhit" 1 586 ""
v L "stream" 1 586 "int8" `383 
f B "kbhit" 1 586 "int8(int8 stream)" `382 
f N "printf" 1 587 ""
v L "string" 1 587 "*int8" `385 
f B "printf" 1 587 "void(*int8 string,*int8 _VA_LIST)" `384 
f N "fprintf" 1 588 ""
v L "stream" 1 588 "int8" `388 
v L "string" 1 588 "*int8" `389 
f B "fprintf" 1 588 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `387 
f N "putc_send" 1 589 ""
f B "putc_send" 1 589 "void()" `391 
f N "fputc_send" 1 590 ""
v L "stream" 1 590 "int8" `393 
f B "fputc_send" 1 590 "void(int8 stream)" `392 
f N "rcv_buffer_full" 1 591 ""
f B "rcv_buffer_full" 1 591 "int8()" `394 
f N "rcv_buffer_full" 1 592 ""
v L "stream" 1 592 "int8" `396 
f B "rcv_buffer_full" 1 592 "int8(int8 stream)" `395 
f N "rcv_buffer_bytes" 1 593 ""
f B "rcv_buffer_bytes" 1 593 "int16()" `397 
f N "rcv_buffer_bytes" 1 594 ""
v L "stream" 1 594 "int8" `399 
f B "rcv_buffer_bytes" 1 594 "int16(int8 stream)" `398 
f N "tx_buffer_full" 1 595 ""
f B "tx_buffer_full" 1 595 "int8()" `400 
f N "tx_buffer_full" 1 596 ""
v L "stream" 1 596 "int8" `402 
f B "tx_buffer_full" 1 596 "int8(int8 stream)" `401 
f N "tx_buffer_bytes" 1 597 ""
f B "tx_buffer_bytes" 1 597 "int16()" `403 
f N "tx_buffer_bytes" 1 598 ""
v L "stream" 1 598 "int8" `405 
f B "tx_buffer_bytes" 1 598 "int16(int8 stream)" `404  "#use i2c() Prototypes:"
f N "i2c_read" 1 601 ""
f B "i2c_read" 1 601 "int8()" `406 
f N "i2c_read" 1 602 ""
v L "ack" 1 602 "int8" `408 
f B "i2c_read" 1 602 "int8(int8 ack)" `407 
f N "i2c_read" 1 603 ""
v L "stream" 1 603 "int8" `410 
v L "ack" 1 603 "int8" `411 
f B "i2c_read" 1 603 "int8(int8 stream,int8 ack)" `409 
f N "i2c_write" 1 604 ""
v L "data" 1 604 "int8" `413 
f B "i2c_write" 1 604 "int8(int8 data)" `412 
f N "i2c_write" 1 605 ""
v L "stream" 1 605 "int8" `415 
v L "data" 1 605 "int8" `416 
f B "i2c_write" 1 605 "int8(int8 stream,int8 data)" `414 
f N "i2c_start" 1 606 ""
f B "i2c_start" 1 606 "void()" `417 
f N "i2c_start" 1 607 ""
v L "stream" 1 607 "int8" `419 
f B "i2c_start" 1 607 "void(int8 stream)" `418 
f N "i2c_start" 1 608 ""
v L "stream" 1 608 "int8" `421 
v L "restart" 1 608 "int8" `422 
f B "i2c_start" 1 608 "void(int8 stream,int8 restart)" `420 
f N "i2c_stop" 1 609 ""
f B "i2c_stop" 1 609 "void()" `423 
f N "i2c_stop" 1 610 ""
v L "stream" 1 610 "int8" `425 
f B "i2c_stop" 1 610 "void(int8 stream)" `424 
f N "i2c_isr_state" 1 611 ""
f B "i2c_isr_state" 1 611 "int8()" `426 
f N "i2c_slaveaddr" 1 612 ""
v L "addr" 1 612 "int8" `428 
f B "i2c_slaveaddr" 1 612 "void(int8 addr)" `427 
f N "i2c_slaveaddr" 1 613 ""
v L "stream" 1 613 "int8" `430 
v L "addr" 1 613 "int8" `431 
f B "i2c_slaveaddr" 1 613 "void(int8 stream,int8 addr)" `429 
f N "i2c_poll" 1 614 ""
f B "i2c_poll" 1 614 "int8()" `432 
f N "i2c_poll" 1 615 ""
v L "stream" 1 615 "int8" `434 
f B "i2c_poll" 1 615 "int8(int8 stream)" `433 
f N "i2c_init" 1 616 ""
v L "baud" 1 616 "int32" `436 
f B "i2c_init" 1 616 "void(int32 baud)" `435 
f N "i2c_init" 1 617 ""
v L "stream" 1 617 "int8" `438 
v L "baud" 1 617 "int32" `439 
f B "i2c_init" 1 617 "void(int8 stream,int32 baud)" `437  "#use spi() Prototypes:"
f N "spi_xfer" 1 620 ""
f B "spi_xfer" 1 620 "int8()" `440 
f N "spi_xfer" 1 621 ""
f G "spi_xfer" 1 621 "int16(int8 data)" `441 
f N "spi_xfer" 1 622 ""
f G "spi_xfer" 1 622 "int32(int8 data)" `441 
f N "spi_xfer" 1 623 ""
v L "data" 1 623 "int8" `442 
f B "spi_xfer" 1 623 "int8(int8 data)" `441 
f N "spi_xfer" 1 624 ""
v L "data" 1 624 "int16" `444 
f B "spi_xfer" 1 624 "int16(int16 data)" `443 
f N "spi_xfer" 1 625 ""
v L "data" 1 625 "int32" `446 
f B "spi_xfer" 1 625 "int32(int32 data)" `445 
f N "spi_xfer" 1 626 ""
v L "stream" 1 626 "int8" `448 
v L "data" 1 626 "int8" `449 
f B "spi_xfer" 1 626 "int8(int8 stream,int8 data)" `447 
f N "spi_xfer" 1 627 ""
v L "stream" 1 627 "int8" `451 
v L "data" 1 627 "int16" `452 
f B "spi_xfer" 1 627 "int16(int8 stream,int16 data)" `450 
f N "spi_xfer" 1 628 ""
v L "stream" 1 628 "int8" `454 
v L "data" 1 628 "int32" `455 
f B "spi_xfer" 1 628 "int32(int8 stream,int32 data)" `453 
f N "spi_xfer" 1 629 ""
v L "stream" 1 629 "int8" `457 
v L "data" 1 629 "int8" `458 
v L "bits" 1 629 "int8" `459 
f B "spi_xfer" 1 629 "int8(int8 stream,int8 data,int8 bits)" `456 
f N "spi_xfer" 1 630 ""
v L "stream" 1 630 "int8" `461 
v L "data" 1 630 "int16" `462 
v L "bits" 1 630 "int8" `463 
f B "spi_xfer" 1 630 "int16(int8 stream,int16 data,int8 bits)" `460 
f N "spi_xfer" 1 631 ""
v L "stream" 1 631 "int8" `465 
v L "data" 1 631 "int32" `466 
v L "bits" 1 631 "int8" `467 
f B "spi_xfer" 1 631 "int32(int8 stream,int32 data,int8 bits)" `464 
f N "spi_init" 1 632 ""
v L "baud" 1 632 "int32" `469 
f B "spi_init" 1 632 "void(int32 baud)" `468 
f N "spi_init" 1 633 ""
v L "stream" 1 633 "int8" `471 
v L "baud" 1 633 "int32" `472 
f B "spi_init" 1 633 "void(int8 stream,int32 baud)" `470 
f N "spi_speed" 1 634 ""
v L "baud" 1 634 "int32" `474 
f B "spi_speed" 1 634 "void(int32 baud)" `473 
f N "spi_speed" 1 635 ""
v L "stream" 1 635 "int8" `476 
v L "baud" 1 635 "int32" `477 
f B "spi_speed" 1 635 "void(int8 stream,int32 baud)" `475 
f N "spi_speed" 1 636 ""
v L "stream" 1 636 "int8" `479 
v L "baud" 1 636 "int32" `480 
v L "clock" 1 636 "int32" `481 
f B "spi_speed" 1 636 "void(int8 stream,int32 baud,int32 clock)" `478 
f N "spi_prewrite" 1 637 ""
v L "data" 1 637 "int8" `483 
f B "spi_prewrite" 1 637 "void(int8 data)" `482 
f N "spi_prewrite" 1 638 ""
v L "data" 1 638 "int16" `485 
f B "spi_prewrite" 1 638 "void(int16 data)" `484 
f N "spi_prewrite" 1 639 ""
v L "data" 1 639 "int32" `487 
f B "spi_prewrite" 1 639 "void(int32 data)" `486 
f N "spi_prewrite" 1 640 ""
v L "??65535" 1 640 "int8" `489 
v L "data" 1 640 "int8" `490 
f B "spi_prewrite" 1 640 "void(int8 ,int8 data)" `488 
f N "spi_prewrite" 1 641 ""
v L "??65535" 1 641 "int8" `492 
v L "data" 1 641 "int16" `493 
f B "spi_prewrite" 1 641 "void(int8 ,int16 data)" `491 
f N "spi_prewrite" 1 642 ""
v L "??65535" 1 642 "int8" `495 
v L "data" 1 642 "int32" `496 
f B "spi_prewrite" 1 642 "void(int8 ,int32 data)" `494 
f N "spi_xfer_in" 1 643 ""
f B "spi_xfer_in" 1 643 "int8()" `497 
f N "spi_xfer_in" 1 644 ""
f G "spi_xfer_in" 1 644 "int16(int8 bits)" `498 
f N "spi_xfer_in" 1 645 ""
f G "spi_xfer_in" 1 645 "int32(int8 bits)" `498 
f N "spi_xfer_in" 1 646 ""
v L "bits" 1 646 "int8" `499 
f B "spi_xfer_in" 1 646 "int8(int8 bits)" `498 
f N "spi_xfer_in" 1 647 ""
v L "bits" 1 647 "int8" `501 
f G "spi_xfer_in" 1 647 "int16(int8 bits,int8 bits)" `500 
f N "spi_xfer_in" 1 648 ""
v L "bits" 1 648 "int8" `501 
f G "spi_xfer_in" 1 648 "int32(int8 bits,int8 bits)" `500 
f N "spi_xfer_in" 1 649 ""
v L "stream" 1 649 "int8" `501 
v L "bits" 1 649 "int8" `502 
f B "spi_xfer_in" 1 649 "int8(int8 stream,int8 bits)" `500 
f N "spi_xfer_in" 1 650 ""
v L "stream" 1 650 "int8" `501 
v L "bits" 1 650 "int8" `505 
f G "spi_xfer_in" 1 650 "int16(int8 stream,int8 bits,int8 task)" `503 
f N "spi_xfer_in" 1 651 ""
v L "stream" 1 651 "int8" `501 
v L "bits" 1 651 "int8" `505 
f G "spi_xfer_in" 1 651 "int32(int8 stream,int8 bits,int8 task)" `503  "#use rtos() Prototypes:"
f N "rtos_run" 1 654 ""
f B "rtos_run" 1 654 "void(int8 stream,int8 bits,int8 task)" `503 
f N "rtos_yield" 1 655 ""
f B "rtos_yield" 1 655 "void(int8 bits,int8 task)" `504 
f N "rtos_enable" 1 656 ""
v L "task" 1 656 "int8" `506 
f B "rtos_enable" 1 656 "void(int8 task)" `505 
f N "rtos_disable" 1 657 ""
v L "task" 1 657 "int8" `508 
f B "rtos_disable" 1 657 "void(int8 task)" `507 
f N "rtos_terminate" 1 658 ""
f B "rtos_terminate" 1 658 "void()" `509 
f N "rtos_await" 1 659 ""
v L "flag" 1 659 "int8" `511 
f B "rtos_await" 1 659 "void(int8 flag)" `510 
f N "rtos_wait" 1 660 ""
v L "sem" 1 660 "int8" `513 
f B "rtos_wait" 1 660 "void(int8 sem)" `512 
f N "rtos_signal" 1 661 ""
v L "sem" 1 661 "int8" `515 
f B "rtos_signal" 1 661 "void(int8 sem)" `514 
f N "rtos_msg_send" 1 662 ""
v L "task" 1 662 "int8" `517 
v L "msg" 1 662 "int8" `518 
f B "rtos_msg_send" 1 662 "void(int8 task,int8 msg)" `516 
f N "rtos_msg_read" 1 663 ""
f B "rtos_msg_read" 1 663 "int8()" `519 
f N "rtos_msg_poll" 1 664 ""
f B "rtos_msg_poll" 1 664 "int8()" `520 
f N "rtos_overrun" 1 665 ""
v L "task" 1 665 "int8" `522 
f B "rtos_overrun" 1 665 "int8(int8 task)" `521 
f N "rtos_stats" 1 666 ""
v L "task" 1 666 "int8" `524 
v L "stat" 1 666 "*int8" `525 
f B "rtos_stats" 1 666 "void(int8 task,*int8 stat)" `523  "#use timer() Prototypes:"
f N "get_ticks" 1 669 ""
f B "get_ticks" 1 669 "int8()" `526 
f N "get_ticks" 1 670 ""
f G "get_ticks" 1 670 "int16(int8 stream)" `527 
f N "get_ticks" 1 671 ""
f G "get_ticks" 1 671 "int32(int8 stream)" `527 
f N "get_ticks" 1 672 ""
v L "stream" 1 672 "int8" `528 
f B "get_ticks" 1 672 "int8(int8 stream)" `527 
f N "get_ticks" 1 673 ""
v L "stream" 1 673 "int8" `530 
f G "get_ticks" 1 673 "int16(int8 stream)" `529 
f N "get_ticks" 1 674 ""
v L "stream" 1 674 "int8" `530 
f G "get_ticks" 1 674 "int32(int8 stream)" `529 
f N "set_ticks" 1 675 ""
v L "value" 1 675 "int8" `530 
f B "set_ticks" 1 675 "void(int8 value)" `529 
f N "set_ticks" 1 676 ""
v L "value" 1 676 "int16" `532 
f B "set_ticks" 1 676 "void(int16 value)" `531 
f N "set_ticks" 1 677 ""
v L "value" 1 677 "int32" `534 
f B "set_ticks" 1 677 "void(int32 value)" `533 
f N "set_ticks" 1 678 ""
v L "stream" 1 678 "int8" `536 
v L "value" 1 678 "int8" `537 
f B "set_ticks" 1 678 "void(int8 stream,int8 value)" `535 
f N "set_ticks" 1 679 ""
v L "stream" 1 679 "int8" `539 
v L "value" 1 679 "int16" `540 
f B "set_ticks" 1 679 "void(int8 stream,int16 value)" `538 
f N "set_ticks" 1 680 ""
v L "stream" 1 680 "int8" `542 
v L "value" 1 680 "int32" `543 
f B "set_ticks" 1 680 "void(int8 stream,int32 value)" `541  "#use pwm() Prototypes:"
f N "pwm_on" 1 683 ""
f B "pwm_on" 1 683 "void()" `544 
f N "pwm_on" 1 684 ""
v L "stream" 1 684 "int8" `546 
f B "pwm_on" 1 684 "void(int8 stream)" `545 
f N "pwm_off" 1 685 ""
f B "pwm_off" 1 685 "void()" `547 
f N "pwm_off" 1 686 ""
v L "stream" 1 686 "int8" `549 
f B "pwm_off" 1 686 "void(int8 stream)" `548 
f N "pwm_set_duty" 1 687 ""
v L "duty" 1 687 "int16" `551 
f B "pwm_set_duty" 1 687 "void(int16 duty)" `550 
f N "pwm_set_duty" 1 688 ""
v L "stream" 1 688 "int8" `553 
v L "duty" 1 688 "int16" `554 
f B "pwm_set_duty" 1 688 "void(int8 stream,int16 duty)" `552 
f N "pwm_set_duty_percent" 1 689 ""
v L "percent" 1 689 "int16" `556 
f B "pwm_set_duty_percent" 1 689 "void(int16 percent)" `555 
f N "pwm_set_duty_percent" 1 690 ""
v L "stream" 1 690 "int8" `558 
v L "percent" 1 690 "int16" `559 
f B "pwm_set_duty_percent" 1 690 "void(int8 stream,int16 percent)" `557 
f N "pwm_set_frequency" 1 691 ""
v L "frequency" 1 691 "int32" `561 
f B "pwm_set_frequency" 1 691 "void(int32 frequency)" `560 
f N "pwm_set_frequency" 1 692 ""
v L "stream" 1 692 "int8" `563 
v L "frequency" 1 692 "int32" `564 
f B "pwm_set_frequency" 1 692 "void(int8 stream,int32 frequency)" `562  "#use capture() Prototypes:"
f N "get_capture_time" 1 695 ""
f B "get_capture_time" 1 695 "int16()" `565 
f N "get_capture_time" 1 696 ""
v L "stream" 1 696 "int8" `567 
f B "get_capture_time" 1 696 "int16(int8 stream)" `566 
f N "get_capture_event" 1 697 ""
f B "get_capture_event" 1 697 "int8()" `568 
f N "get_capture_event" 1 698 ""
v L "stream" 1 698 "int8" `570 
f B "get_capture_event" 1 698 "int8(int8 stream)" `569  "Enviroment Prototypes:"
c L "get_capture_event" 1 3 2 "FUNCTION"
f N "goto_address" 1 711 ""
v L "address" 1 711 "int16" `572 
f B "goto_address" 1 711 "void(int16 address)" `571 
f N "label_address" 1 712 ""
v L "label" 1 712 "int16" `574 
f B "label_address" 1 712 "int16(int16 label)" `573  "Program Memory Prototypes:"
f N "read_program_memory" 1 715 ""
v L "address" 1 715 "int16" `576 
v L "dataptr" 1 715 "*int8" `577 
v L "count" 1 715 "int16" `578 
f B "read_program_memory" 1 715 "void(int16 address,*int8 dataptr,int16 count)" `575 
f N "read_program_eeprom" 1 716 ""
v L "address" 1 716 "int16" `580 
f B "read_program_eeprom" 1 716 "int16(int16 address)" `579 
f N "erase_program_eeprom" 1 717 ""
v L "address" 1 717 "int16" `582 
f B "erase_program_eeprom" 1 717 "void(int16 address)" `581 
f N "write_program_memory" 1 718 ""
v L "address" 1 718 "int16" `584 
v L "dataptr" 1 718 "*int8" `585 
v L "count" 1 718 "int16" `586 
f B "write_program_memory" 1 718 "void(int16 address,*int8 dataptr,int16 count)" `583 
f N "write_program_eeprom" 1 719 ""
v L "address" 1 719 "int16" `588 
v L "data" 1 719 "int16" `589 
f B "write_program_eeprom" 1 719 "void(int16 address,int16 data)" `587  "EEPROM Prototypes:"
d G "__EEADDRESS__" 1 724 "unsigned int16"
f N "read_eeprom" 1 729 ""
v L "address" 1 729 "int16" `591 
f B "read_eeprom" 1 729 "int8(int16 address)" `590 
f N "write_eeprom" 1 730 ""
v L "address" 1 730 "int16" `593 
v L "value" 1 730 "int8" `594 
f B "write_eeprom" 1 730 "void(int16 address,int8 value)" `592  "INT"
c L "write_eeprom" 1 3 4 "FUNCTION"
f N "enable_interrupts" 1 737 ""
v L "interrupt" 1 737 "int32" `596 
f B "enable_interrupts" 1 737 "void(int32 interrupt)" `595 
f N "disable_interrupts" 1 738 ""
v L "interrupt" 1 738 "int32" `598 
f B "disable_interrupts" 1 738 "void(int32 interrupt)" `597 
f N "clear_interrupt" 1 739 ""
v L "interrupt" 1 739 "int32" `600 
f B "clear_interrupt" 1 739 "void(int32 interrupt)" `599 
f N "interrupt_active" 1 740 ""
v L "interrupt" 1 740 "int32" `602 
f B "interrupt_active" 1 740 "int8(int32 interrupt)" `601 
f N "interrupt_enabled" 1 741 ""
v L "interrupt" 1 741 "int32" `604 
f B "interrupt_enabled" 1 741 "int8(int32 interrupt)" `603 
f N "ext_int_edge" 1 742 ""
v L "source" 1 742 "int8" `606 
v L "edge" 1 742 "int8" `607 
f B "ext_int_edge" 1 742 "void(int8 source,int8 edge)" `605 
f N "jump_to_isr" 1 743 ""
v L "address" 1 743 "int16" `609 
f B "jump_to_isr" 1 743 "void(int16 address)" `608  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 745 "0x40"
d G "H_TO_L" 1 746 "0"
d G "GLOBAL" 1 748 "0xF2C0"
d G "PERIPH" 1 749 "0xF240"
d G "INT_RTCC" 1 750 "0x00F220"
d G "INT_TIMER0" 1 751 "0x00F220"
d G "INT_TIMER1" 1 752 "0x009D01"
d G "INT_TIMER2" 1 753 "0x009D02"
d G "INT_TIMER3" 1 754 "0x00A002"
d G "INT_EXT_L2H" 1 755 "0x5000F210"
d G "INT_EXT_H2L" 1 756 "0x6000F210"
d G "INT_EXT" 1 757 "0x00F210"
d G "INT_EXT1_L2H" 1 758 "0x5001F008"
d G "INT_EXT1_H2L" 1 759 "0x6001F008"
d G "INT_EXT1" 1 760 "0x00F008"
d G "INT_EXT2_L2H" 1 761 "0x5002F010"
d G "INT_EXT2_H2L" 1 762 "0x6002F010"
d G "INT_EXT2" 1 763 "0x00F010"
d G "INT_RB" 1 764 "0x00FFF208"
d G "INT_AD" 1 765 "0x009D40"
d G "INT_RDA" 1 766 "0x009D20"
d G "INT_TBE" 1 767 "0x009D10"
d G "INT_SSP" 1 768 "0x009D08"
d G "INT_CCP1" 1 769 "0x009D04"
d G "INT_CCP2" 1 770 "0x00A001"
d G "INT_BUSCOL" 1 771 "0x00A008"
d G "INT_LOWVOLT" 1 772 "0x00A004"
d G "INT_COMP" 1 773 "0x00A040"
d G "INT_EEPROM" 1 774 "0x00A010"
d G "INT_OSCF" 1 775 "0x00A080"
d G "INT_USB" 1 776 "0x00A020"
D G "freq" 0 3 "8000000"
D G "TFT_DC" 0 8 "PIN_C6" "data/command pin"
D G "TFT_CS" 0 9 "PIN_C5" "chip select pin, use it if the display has CS pin"
V G "letra" 0 11 "int8[91][5]" `617 
C L "jump_to_isr" 0 12 1 "FUNCTION"
C L "jump_to_isr" 0 12 1 "FUNCTION"
C L "jump_to_isr" 0 12 1 "FUNCTION"
C L "jump_to_isr" 0 12 1 "FUNCTION"
C L "jump_to_isr" 0 12 1 "FUNCTION"
C L "jump_to_isr" 0 12 1 "FUNCTION"
C L "jump_to_isr" 0 12 1 "FUNCTION"
C L "jump_to_isr" 0 12 1 "FUNCTION"
C L "jump_to_isr" 0 12 1 "FUNCTION"
C L "jump_to_isr" 0 12 1 "FUNCTION"
C L "jump_to_isr" 0 22 1 "*"
C L "jump_to_isr" 0 22 1 "FUNCTION"
C L "jump_to_isr" 0 22 1 "FUNCTION"
C L "jump_to_isr" 0 22 1 "FUNCTION"
C L "jump_to_isr" 0 22 1 "FUNCTION"
C L "jump_to_isr" 0 22 1 "FUNCTION"
C L "jump_to_isr" 0 22 1 "FUNCTION"
C L "jump_to_isr" 0 22 1 "FUNCTION"
C L "jump_to_isr" 0 22 1 "FUNCTION"
C L "jump_to_isr" 0 22 1 "FUNCTION"
C L "jump_to_isr" 0 22 1 "FUNCTION"
C L "jump_to_isr" 0 22 1 "FUNCTION"
C L "jump_to_isr" 0 22 1 "FUNCTION"
C L "jump_to_isr" 2 2 26 "FUNCTION"
D G "_STDINT" 3 19 ""
C L "jump_to_isr" 3 2 1 "FUNCTION"
T G "int8_t" 3 23 "sint8" `619 
T G "uint8_t" 3 24 "int8" `620 
T G "int16_t" 3 25 "sint16" `621 
T G "uint16_t" 3 26 "int16" `622 
T G "int32_t" 3 27 "sint32" `623 
T G "uint32_t" 3 28 "int32" `624 
D G "INT8_MAX" 3 37 " (127)"
D G "INT8_MIN" 3 38 " (-128)"
D G "UINT8_MAX" 3 39 " (255)"
D G "INT16_MAX" 3 41 " (32767)"
D G "INT16_MIN" 3 42 " (-32768)"
D G "UINT16_MAX" 3 43 " (65535)"
D G "INT32_MAX" 3 45 " (2147483647)"
D G "INT32_MIN" 3 46 " (-2147483648)"
D G "UINT32_MAX" 3 47 " (4294967295)"
C L "jump_to_isr" 3 2 1 "FUNCTION"
T G "int_least8_t" 3 61 "sint8" `625 
T G "uint_least8_t" 3 62 "int8" `626 
T G "int_least16_t" 3 63 "sint16" `627 
T G "uint_least16_t" 3 64 "int16" `628 
T G "int_least32_t" 3 65 "sint32" `629 
T G "uint_least32_t" 3 66 "int32" `630 
D G "INT_LEAST8_MAX" 3 75 " (127)"
D G "INT_LEAST8_MIN" 3 76 " (-128)"
D G "UINT_LEAST8_MAX" 3 77 " (255)"
D G "INT_LEAST16_MAX" 3 79 " (32767)"
D G "INT_LEAST16_MIN" 3 80 " (-32768)"
D G "UINT_LEAST16_MAX" 3 81 " (65535)"
D G "INT_LEAST32_MAX" 3 83 " (2147483647)"
D G "INT_LEAST32_MIN" 3 84 " (-2147483648)"
D G "UINT_LEAST32_MAX" 3 85 " (4294967295)"
C L "jump_to_isr" 3 2 1 "FUNCTION"
T G "int_fast8_t" 3 112 "sint8" `631 
T G "uint_fast8_t" 3 113 "int8" `632 
D G "INT_FAST8_MAX" 3 114 " (127)"
D G "INT_FAST8_MIN" 3 115 " (-128)"
D G "UINT_FAST8_MAX" 3 116 " (255)"
T G "int_fast16_t" 3 117 "sint16" `633 
T G "uint_fast16_t" 3 118 "int16" `634 
T G "int_fast32_t" 3 121 "sint32" `635 
T G "uint_fast32_t" 3 122 "int32" `636 
D G "INT_FAST16_MAX" 3 124 " (32767)"
D G "INT_FAST16_MIN" 3 125 " (-32768)"
D G "UINT_FAST16_MAX" 3 126 " (65535)"
D G "INT_FAST32_MAX" 3 128 " (2147483647)"
D G "INT_FAST32_MIN" 3 129 " (-2147483648)"
D G "UINT_FAST32_MAX" 3 130 " (4294967295)"
C L "jump_to_isr" 3 2 1 "FUNCTION"
T G "uintptr_t" 3 148 "int16" `637 
T G "intptr_t" 3 149 "sint16" `638  "/ TODO:"
D G "bool" 2 39 "int1"
D G "HEIGHT" 2 42 "162"
D G "WIDTH" 2 43 "132"
D G "ST_CMD_DELAY" 2 45 "0x80" "special signifier for command lists"
D G "ST77XX_NOP" 2 47 "0x00"
D G "ST77XX_SWRESET" 2 48 "0x01"
D G "ST77XX_RDDID" 2 49 "0x04"
D G "ST77XX_RDDST" 2 50 "0x09"
D G "ST77XX_SLPIN" 2 52 "0x10"
D G "ST77XX_SLPOUT" 2 53 "0x11"
D G "ST77XX_PTLON" 2 54 "0x12"
D G "ST77XX_NORON" 2 55 "0x13"
D G "ST77XX_INVOFF" 2 57 "0x20"
D G "ST77XX_INVON" 2 58 "0x21"
D G "ST77XX_DISPOFF" 2 59 "0x28"
D G "ST77XX_DISPON" 2 60 "0x29"
D G "ST77XX_CASET" 2 61 "0x2A"
D G "ST77XX_RASET" 2 62 "0x2B"
D G "ST77XX_RAMWR" 2 63 "0x2C"
D G "ST77XX_RAMRD" 2 64 "0x2E"
D G "ST77XX_PTLAR" 2 66 "0x30"
D G "ST77XX_COLMOD" 2 67 "0x3A"
D G "ST77XX_MADCTL" 2 68 "0x36"
D G "ST77XX_MADCTL_MY" 2 70 "0x80"
D G "ST77XX_MADCTL_MX" 2 71 "0x40"
D G "ST77XX_MADCTL_MV" 2 72 "0x20"
D G "ST77XX_MADCTL_ML" 2 73 "0x10"
D G "ST77XX_MADCTL_RGB" 2 74 "0x00"
D G "ST77XX_RDID1" 2 76 "0xDA"
D G "ST77XX_RDID2" 2 77 "0xDB"
D G "ST77XX_RDID3" 2 78 "0xDC"
D G "ST77XX_RDID4" 2 79 "0xDD"
D G "ST7789_BLACK" 2 82 "0x0000"
D G "ST7789_BLUE" 2 83 "0x001F"
D G "ST7789_RED" 2 84 "0xF800"
D G "ST7789_GREEN" 2 85 "0x07E0"
D G "ST7789_CYAN" 2 86 "0x07FF"
D G "ST7789_MAGENTA" 2 87 "0xF81F"
D G "ST7789_YELLOW" 2 88 "0xFFE0"
D G "ST7789_WHITE" 2 89 "0xFFFF"
D G "ST7789_SPI_XFER" 2 92 "(x) SPI_XFER(ST7789, x)"
V G "_width" 2 96 "uint8_t" `639  "/< Display width as modified by current rotation"
V G "_height" 2 97 "uint8_t" `640  "/< Display height as modified by current rotation"
V G "_xstart" 2 98 "uint8_t" `641  "/< Internal framebuffer X offset"
V G "_ystart" 2 99 "uint8_t" `642  "/< Internal framebuffer Y offset"
V G "_colstart" 2 100 "uint8_t" `643  "/< Some displays need this changed to offset"
V G "_rowstart" 2 101 "uint8_t" `644  "/< Some displays need this changed to offset"
V G "rotation" 2 102 "uint8_t" `645  "/< Display rotation (0 thru 3)"
V G "X_MAX" 2 103 "uint8_t" `646 
V G "X_BEGIN" 2 104 "uint8_t" `647 
V G "Y_MAX" 2 105 "uint8_t" `648 
V G "Y_BEGIN" 2 106 "uint8_t" `649 
V G "x" 2 108 "uint8_t" `650 
V G "Y" 2 109 "uint8_t" `651 
V G "CARRIAGE" 2 110 "uint8_t" `652 
V G "TX_COLOR" 2 111 "uint16_t" `653 
V G "BG_COLOR" 2 112 "uint16_t" `654 
V G "Cursor" 2 114 "int1" `655 
D G "ST7789_240x240_XSTART" 2 125 "0"
D G "ST7789_240x240_YSTART" 2 126 "0" "80"
V G "cmd_240x240" 2 129 "rom uint8_t[1]" `656  "Init commands for 7789 screens"
C L "jump_to_isr" 2 81 1 "FUNCTION"
C L "jump_to_isr" 2 81 1 "FUNCTION"
C L "jump_to_isr" 2 81 1 "FUNCTION"
C L "jump_to_isr" 2 81 1 "FUNCTION"
C L "jump_to_isr" 2 81 1 "FUNCTION"
C L "jump_to_isr" 2 81 1 "FUNCTION"
C L "jump_to_isr" 2 81 1 "FUNCTION"
C L "jump_to_isr" 2 81 1 "FUNCTION"
C L "jump_to_isr" 2 81 1 "FUNCTION"
C L "jump_to_isr" 2 81 1 "FUNCTION"
C L "jump_to_isr" 2 81 1 "FUNCTION"
C L "jump_to_isr" 2 81 1 "FUNCTION"
C L "jump_to_isr" 2 81 1 "FUNCTION"
C L "jump_to_isr" 2 81 1 "FUNCTION"
C L "jump_to_isr" 2 81 1 "FUNCTION"
C L "jump_to_isr" 2 81 1 "FUNCTION"
C L "jump_to_isr" 2 81 1 "FUNCTION"
C L "jump_to_isr" 2 81 1 "FUNCTION"
C L "jump_to_isr" 2 81 1 "FUNCTION"
C L "jump_to_isr" 2 81 1 "FUNCTION"
C L "jump_to_isr" 2 81 1 "FUNCTION"
C L "jump_to_isr" 2 157 1 "*"
F N "tft_init" 2 158 ""
f G "tft_init" 2 158 "void()" `657 
F N "drawPixel" 2 160 ""
V L "x" 2 160 "uint8_t" `659 
V L "Y" 2 160 "uint8_t" `660 
V L "color" 2 160 "uint16_t" `661 
f G "drawPixel" 2 160 "void(uint8_t x,uint8_t Y,uint16_t color)" `658 
F N "drawHLine" 2 161 ""
V L "x" 2 161 "uint8_t" `663 
V L "Y" 2 161 "uint8_t" `664 
V L "w" 2 161 "uint8_t" `665 
V L "color" 2 161 "uint16_t" `666 
f G "drawHLine" 2 161 "void(uint8_t x,uint8_t Y,uint8_t w,uint16_t color)" `662 
F N "drawVLine" 2 162 ""
V L "x" 2 162 "uint8_t" `668 
V L "Y" 2 162 "uint8_t" `669 
V L "h" 2 162 "uint8_t" `670 
V L "color" 2 162 "uint16_t" `671 
f G "drawVLine" 2 162 "void(uint8_t x,uint8_t Y,uint8_t h,uint16_t color)" `667 
F N "fillRect" 2 163 ""
V L "x" 2 163 "uint8_t" `673 
V L "Y" 2 163 "uint8_t" `674 
V L "w" 2 163 "uint8_t" `675 
V L "h" 2 163 "uint8_t" `676 
V L "color" 2 163 "uint16_t" `677 
f G "fillRect" 2 163 "void(uint8_t x,uint8_t Y,uint8_t w,uint8_t h,uint16_t color)" `672 
F N "fillScreen" 2 164 ""
V L "color" 2 164 "uint16_t" `679 
f G "fillScreen" 2 164 "void(uint16_t color)" `678 
F N "setRotation" 2 165 ""
V L "m" 2 165 "uint8_t" `681 
f G "setRotation" 2 165 "void(uint8_t m)" `680 
F N "invertDisplay" 2 166 ""
V L "i" 2 166 "int8" `683 
f G "invertDisplay" 2 166 "void(int8 i)" `682 
F N "tft_putc" 2 168 ""
V L "c" 2 168 "int8" `685 
f G "tft_putc" 2 168 "void(int8 c)" `684 
F N "printDisp" 2 169 ""
V L "x" 2 169 "uint8_t" `687 
V L "Y" 2 169 "uint8_t" `688 
V L "color" 2 169 "uint16_t" `689 
V L "b_color" 2 169 "uint16_t" `690 
V L "ch" 2 169 "??0 *" `691 
f G "printDisp" 2 169 "void(uint8_t x,uint8_t Y,uint16_t color,uint16_t b_color,??0 * ch)" `686 
F N "tft_gotoxy" 2 170 ""
V L "x" 2 170 "uint8_t" `694 
V L "Y" 2 170 "uint8_t" `695 
f G "tft_gotoxy" 2 170 "void(uint8_t x,uint8_t Y)" `693 
F N "tft_cursor_on" 2 171 ""
V L "curs" 2 171 "int8" `697 
f G "tft_cursor_on" 2 171 "void(int8 curs)" `696  "************************* Non User Functions *************************//"
F N "startWrite" 2 174 ""
f G "startWrite" 2 174 "void()" `698 
F N "endWrite" 2 175 ""
f G "endWrite" 2 175 "void()" `699 
F N "displayInit" 2 176 ""
V L "addr" 2 176 "rom uint8_t *" `701 
f G "displayInit" 2 176 "void(rom uint8_t * addr)" `700 
F N "writeCommand" 2 177 ""
V L "cmd" 2 177 "uint8_t" `704 
f G "writeCommand" 2 177 "void(uint8_t cmd)" `703 
F N "setAddrWindow" 2 178 ""
V L "x" 2 178 "uint8_t" `706 
V L "Y" 2 178 "uint8_t" `707 
V L "w" 2 178 "uint8_t" `708 
V L "h" 2 178 "uint8_t" `709 
f G "setAddrWindow" 2 178 "void(uint8_t x,uint8_t Y,uint8_t w,uint8_t h)" `705  "@brief  Call before issuing command(s) or data to display. Performs"
C L "setAddrWindow" 2 157 2 "FUNCTION"
F N "startWrite" 2 187 ""
F G "startWrite" 2 187 "void()" `698 
C L "endWrite" 2 157 3 "FUNCTION"
F N "endWrite" 2 200 ""
F G "endWrite" 2 200 "void()" `699 
C L "writeCommand" 2 157 6 "FUNCTION"
F N "writeCommand" 2 216 ""
V L "cmd" 2 216 "uint8_t" `711 
F G "writeCommand" 2 216 "void(uint8_t cmd)" `703 
C L "displayInit" 2 157 3 "FUNCTION"
F N "displayInit" 2 229 ""
V L "addr" 2 229 "rom uint8_t *" `711 
F G "displayInit" 2 229 "void(rom uint8_t * addr)" `700 
V L "numCommands" 2 230 "uint8_t" `710 
V L "numArgs" 2 230 "uint8_t" `711 
V L "ms" 2 231 "uint16_t" `712 
C L "displayInit" 2 157 1 "FUNCTION"
C L "displayInit" 2 157 1 "FUNCTION"
C L "displayInit" 2 157 1 "FUNCTION"
C L "displayInit" 2 157 1 "FUNCTION"
C L "displayInit" 2 157 1 "FUNCTION"
C L "displayInit" 2 157 1 "FUNCTION"
C L "displayInit" 2 157 1 "FUNCTION"
C L "displayInit" 2 157 1 "FUNCTION"
C L "displayInit" 2 157 1 "FUNCTION"
C L "displayInit" 2 157 1 "FUNCTION"
C L "tft_init" 2 157 1 "FUNCTION"
F N "tft_init" 2 260 ""
F G "tft_init" 2 260 "void()" `657 
C L "setAddrWindow" 2 157 5 "FUNCTION"
F N "setAddrWindow" 2 297 ""
V L "x" 2 297 "uint8_t" `706 
V L "Y" 2 297 "uint8_t" `707 
V L "w" 2 297 "uint8_t" `708 
V L "h" 2 297 "uint8_t" `717 
F G "setAddrWindow" 2 297 "void(uint8_t x,uint8_t Y,uint8_t w,uint8_t h)" `705 
C L "setAddrWindow" 2 157 1 "FUNCTION"
C L "setAddrWindow" 2 157 1 "FUNCTION"
C L "setAddrWindow" 2 157 1 "FUNCTION"
C L "setRotation" 2 157 2 "FUNCTION"
F N "setRotation" 2 322 ""
V L "m" 2 322 "uint8_t" `714 
F G "setRotation" 2 322 "void(uint8_t m)" `680 
V L "madctl" 2 323 "uint8_t" `713 
C L "setRotation" 2 157 1 "FUNCTION"
F N "drawPixel" 2 368 ""
V L "x" 2 368 "uint8_t" `659 
V L "Y" 2 368 "uint8_t" `660 
V L "color" 2 368 "uint16_t" `721 
F G "drawPixel" 2 368 "void(uint8_t x,uint8_t Y,uint16_t color)" `658 
C L "drawHLine" 2 157 5 "FUNCTION"
F N "drawHLine" 2 387 ""
V L "x" 2 387 "uint8_t" `663 
V L "Y" 2 387 "uint8_t" `664 
V L "w" 2 387 "uint8_t" `665 
V L "color" 2 387 "uint16_t" `722 
F G "drawHLine" 2 387 "void(uint8_t x,uint8_t Y,uint8_t w,uint16_t color)" `662 
V L "hi" 2 389 "uint8_t" `718 
V L "lo" 2 389 "uint8_t" `719 
C L "drawVLine" 2 157 5 "FUNCTION"
F N "drawVLine" 2 414 ""
V L "x" 2 414 "uint8_t" `668 
V L "Y" 2 414 "uint8_t" `669 
V L "h" 2 414 "uint8_t" `670 
V L "color" 2 414 "uint16_t" `724 
F G "drawVLine" 2 414 "void(uint8_t x,uint8_t Y,uint8_t h,uint16_t color)" `667 
V L "hi" 2 416 "uint8_t" `720 
V L "lo" 2 416 "uint8_t" `721 
C L "fillRect" 2 157 6 "FUNCTION"
F N "fillRect" 2 439 ""
V L "x" 2 439 "uint8_t" `673 
V L "Y" 2 439 "uint8_t" `674 
V L "w" 2 439 "uint8_t" `675 
V L "h" 2 439 "uint8_t" `676 
V L "color" 2 439 "uint16_t" `727 
F G "fillRect" 2 439 "void(uint8_t x,uint8_t Y,uint8_t w,uint8_t h,uint16_t color)" `672 
C L "fillRect" 2 157 1 "FUNCTION"
V L "hi" 2 441 "uint8_t" `722 
V L "lo" 2 441 "uint8_t" `723 
V L "px" 2 450 "uint16_t" `724 
C L "fillScreen" 2 157 2 "FUNCTION"
F N "fillScreen" 2 465 ""
V L "color" 2 465 "uint16_t" `729 
F G "fillScreen" 2 465 "void(uint16_t color)" `678 
C L "invertDisplay" 2 157 3 "FUNCTION"
F N "invertDisplay" 2 476 ""
V L "i" 2 476 "int8" `729 
F G "invertDisplay" 2 476 "void(int8 i)" `682 
F N "tft_cursor_on" 2 482 ""
V L "curs" 2 482 "int8" `729 
F G "tft_cursor_on" 2 482 "void(int8 curs)" `696 
F N "printDisp" 2 486 ""
V L "x" 2 486 "uint8_t" `687 
V L "Y" 2 486 "uint8_t" `688 
V L "f_color" 2 486 "uint16_t" `689 
V L "b_color" 2 486 "uint16_t" `690 
V L "ch" 2 486 "??0 *" `733 
F G "printDisp" 2 486 "void(uint8_t x,uint8_t Y,uint16_t f_color,uint16_t b_color,??0 * ch)" `686 
V L "i" 2 487 "int8" `728 
V L "j" 2 488 "int8" `729 
F N "tft_putc" 2 495 ""
V L "c" 2 495 "int8" `731 
F G "tft_putc" 2 495 "void(int8 c)" `684 
F N "tft_gotoxy" 2 525 ""
V L "x" 2 525 "uint8_t" `694 
V L "Y" 2 525 "uint8_t" `732 
F G "tft_gotoxy" 2 525 "void(uint8_t x,uint8_t Y)" `693 
C L "MAIN" 2 157 1 "FUNCTION"
F N "MAIN" 0 107 ""
F G "MAIN" 0 107 "int8(uint8_t x,uint8_t Y,??0 * ch,??0 * ch)" `730 
C L "MAIN" 0 131 7 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "pll_locked" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "spi_xfer" 0 3
F B "spi_speed" 1 3
F B "spi_init" 1 2
